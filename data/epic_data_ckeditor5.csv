Repo Owner,Repo Name,Issue Title,Issue Body,Author,Assignees,Comments,Labels,Issue State,Issue Number,References
ckeditor,ckeditor5,Introduce a way to reach unaccessible places (aka magicline and magicblock) - stage I,"Problem:

![image](https://user-images.githubusercontent.com/156149/33133150-2437f6f8-cf9c-11e7-9f4d-c1c8a8daf1d5.png)

In CKEditor 4 this problem was solved by the [magicline](https://sdk.ckeditor.com/samples/magicline.html) plugin. We need some solution for CKEditor 5 as well.

The discussion started in relation to autoparagraphing. Interesting comments:

* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-247336739
* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-281646290
* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-281648038
* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-281649188
* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-281654155
* https://github.com/ckeditor/ckeditor5/issues/331#issuecomment-281657728

---

If you would like this feature to be implemented ASAP, please react with üëç to this post.",Reinmar,['oleq'],"[{'body': 'DUP reported in https://github.com/ckeditor/ckeditor5/issues/685.', 'author': 'Reinmar'}, {'body': ""I promised to describe here some simpler workarounds for this problem. They are much easier to implement than Magicline and perhaps might even be a good start for us. \r\n\r\nAdditionally, I noticed two things when describing these solutions:\r\n\r\n* that with a bit more work those solutions would also solve the problem of broken <kbd>Ctrl</kbd>+<kbd>A</kbd> when widget is the first/last element of the content,\r\n* and that they don't conflict with a magicline-like solution that much (so they can be treated as addition to magicline, not a replacement).\r\n\r\n## Solution 1\r\n\r\n1. Listen to selection changes.\r\n2. Once discovering that an object type of element is selected (e.g. an image), insert a paragraph before/after it if it's at the very start/end of the content. Such insertion should happen in a transparent batch to not create an undo step.\r\n3. Remove these paragraphs if they are still empty after the selection is moved somewhere else.\r\n\r\nPros:\r\n\r\n* Quite simple to implement.\r\n* Well discoverable for the users.\r\n* Similar to how image captions work.\r\n\r\nCons:\r\n\r\n* There will be even more blinking (right now only captions appear when you click an image).\r\n* It would require additional work to filter these paragraphs out in `getData()` if it was called while  an image was selected.\r\n* You need to know that you have to select the widget first to show these paragraphs.\r\n\r\n## Solution 2\r\n\r\nLike in solution 1 but add these paragraphs only when someone:\r\n\r\n1. selects an image,\r\n2. presses an arrow key (e.g. down/right if the image is the last element of the content).\r\n\r\nPros:\r\n\r\n* Less intrusive than blinking paragraphs.\r\n* Quite simple to implement too.\r\n\r\nCons:\r\n\r\n* Less discoverable than Solution 1."", 'author': 'Reinmar'}, {'body': 'DUP reported in https://github.com/ckeditor/ckeditor5/issues/935.', 'author': 'Reinmar'}, {'body': 'DUP reported in https://github.com/ckeditor/ckeditor5-engine/issues/1400.', 'author': 'Reinmar'}, {'body': ""What's the good solution? üî¢ "", 'author': 'devgogo'}, {'body': ""@Reinmar Don't you think this should be categorized as a bug rather than an enhancement?\r\n\r\nMost people type and then insert image at the end of the editor and as a result, cannot continue writing afterward.\r\n\r\nAlso, I think when a user clicks on image caption and hit enter, it should result in a new paragraph. Maybe, this can be a quick fix for images while the best solution is being decided on."", 'author': 'syavash'}, {'body': ""You may be right. For me, it's a missing feature because I know that it's how browsers work and we need to implement a feature which will allow reaching those places. For the users, this is purely a bug.\r\n\r\nStill, it won't change much on how this ticket will be treated. We'd like to close it ASAP because we know that it makes for a bad UX, but we also know the scope of the problem (which is big)."", 'author': 'Reinmar'}, {'body': 'BTW, @oleq, you can start processing this issue in the back of your head ;)', 'author': 'Reinmar'}, {'body': 'cc @dkonopka too', 'author': 'Reinmar'}, {'body': ""@Reinmar I totally understand the scope and complications of this problem.\r\n\r\nThat's why I suggested that maybe initially we can just add a new paragraph when a user clicks on image's caption and hit enter. This won't be a solution when image caption is disabled, but I believe in any case that should be the behavior for captions. (Maybe, I'm wrong).\r\n\r\nThanks for the amazing job you guys are doing with ckeditor5."", 'author': 'syavash'}, {'body': ""That's a good question. In CKEditor 4 <kbd>Enter</kbd> opens widget dialogs (e.g. image properties). In CKEditor 5 we don't use dialogs and we used <kbd>Tab</kbd> for navigation so far. This leaves <kbd>Enter</kbd> unused.\r\n\r\nMy only worry with using only a keystroke is its discoverability. Still, it might be a good (and quick) start."", 'author': 'Reinmar'}, {'body': 'is there any estimate for this issue? ', 'author': 'balgev'}, {'body': ""We're about to merge a change which is going to allow inserting paragraphs before/after widgets by using <kbd>Enter</kbd> (to insert a paragraph after a widget) and <kbd>Shift</kbd>+<kbd>Enter</kbd> (to insert a paragraph before a widget). It works like this:\r\n\r\n![jun-14-2018 15-49-44](https://user-images.githubusercontent.com/156149/41416218-a42d0864-6fea-11e8-92a1-7661a9725c96.gif)\r\n\r\nIt doesn't solve this issue completely. It's sort of a workaround until we'll be able to introduce something with better discoverability (something that reacts to the mouse ‚Äì like CKEditor 4's magicline).\r\n\r\nStill, we'd like to hear your feedback. \r\n\r\nPS. This change is going to be released around the next week."", 'author': 'Reinmar'}, {'body': ""I think having a temporary fix is great, as this issue breaks the editor for users.\r\n\r\nMy concern would be that in other editors, pressing enter whilst selecting an image often deletes the image, as the intention is to replace it with a new line. (Albeit, most commonly when the image is inline, which isn't the case with ckeditor5)\r\n\r\nInstead of waiting for magicline, gapcursor, etc., I think it would be worth mapping the suggested approach above to directional keys too, as mentioned in https://github.com/ckeditor/ckeditor5/issues/407#issuecomment-355927497"", 'author': 'mjadobson'}, {'body': ""> My concern would be that in other editors, pressing enter whilst selecting an image often deletes the image\r\n\r\nI'm worried about this too. Although, I've realised recently when working on shift+enter that pressing enter on non-collapsed selections might be very uncommon. And that the expected result (inserting a line break) is quite surprising (at least for me) when experienced live.\r\n\r\nAnyway, you may be right that with block images we're safer here. If we'd introduce the same for inline images it would be worse.\r\n\r\n> Instead of waiting for magicline, gapcursor, etc., I think it would be worth mapping the suggested approach above to directional keys too, as mentioned in #407 (comment)\r\n\r\nI'm worried that the users would not know that they need to remove these paragraphs that they created this way (if they don't want to type in them). It's not typical for arrow keys to insert new elements.\r\n\r\nTherefore, we considered this option but with an additional mechanism which would delete these paragraphs once you'd leave them without typing anything. Plus, which makes all this more complex, these paragraphs should not appear in the model (should be view-layer-only) to not cause some messy behaviours during real-time collaboration and when autosaving the content."", 'author': 'Reinmar'}, {'body': ""One of the options for the magic-paragraphs is what @fredck proposed some time ago ‚Äì that they are always present in the view at the beginning/end of the content if starts/ends with a block widget, regardless of where you currently have the selection. They may have a minimal height (even `0px`) to not be visible when the selection is somewhere else. Thanks to that:\r\n\r\n* The selection will be automatically (natively) placed there if you click after a widget. At this point we can remove the `height:0px` style to show this paragraph.\r\n* Arrow keys will work the same way as clicking ‚Äì once the selection is placed in one of these paragraphs, we show it.\r\n* Ctrl+A would always work too because there would always be normal paragraphs at both ends of the content.\r\n\r\nStill, the question is whether they should be present in the model. If we'll decide that yes, then getting rid of them in `getData()` will not be hard. If not, we still have the problem how to render them in the view without polluting the model with them."", 'author': 'Reinmar'}, {'body': '> I\'m worried that the users would not know that they need to remove these paragraphs that they created this way (if they don\'t want to type in them). It\'s not typical for arrow keys to insert new elements.\r\n\r\nYeah, it\'s not ideal. I was thinking along the lines of removing them if they were still empty when the caret moves away. But thinking about it again, deleting is very well understood; I suspect users would remove any unintentional paragraphs without much fuss.\r\n\r\nI think the bigger issue, as with the `enter` key is discoverability.\r\n\r\n> One of the options for the magic-paragraphs is what @fredck proposed some time ago ...\r\n\r\nThat approach would certainly solve a lot more of these kinds of quirks.\r\n\r\nAs it\'s a temporary workaround, I think having these ""magic paragraphs"" in the model and filtering them out when calling `getData()` (or similar), would be a pretty reasonable compromise. However, I don\'t know the implications of this on collaborative editing.', 'author': 'mjadobson'}, {'body': ""Since this problem is a bug from user's perspective any way that quickly can help user accessing those areas would be great and I think what @Reinmar proposed would definitely work for now.\r\n\r\nAlso, when user selects the caption input, I think hitting enter there should result in a new paragraph."", 'author': 'syavash'}, {'body': ""> Also, when user selects the caption input, I think hitting enter there should result in a new paragraph.\r\n\r\nThis is unrelated to this ticket. If you'd like to discuss this topic, please report a separate ticket."", 'author': 'Reinmar'}, {'body': '> that they are always present in the view at the **beginning**/end of the content\r\n\r\nNever talked about the ""beginning"", but it is an interesting case as well. It may have a more complex UX because while it is ok to have some empty space at the end of the content, it is a no go to have it at the beginning of it. Anyway, it\'s curious to give it a try.\r\n\r\nIn any case, I would break this into separate steps... first solving the problem at the end of the document, which may be simpler, then thinking about the beginning of it.\r\n\r\nAs for the ""view vs model"" thing, it would be ""technically wrong"" to have it in the model, as it is not aware of the UX quirks and it should ideally land in the view. Ofc, this will all depend on how easily it can be implemented and, if we face limitations, whichever solution is ok, as long as the problem is solved.', 'author': 'fredck'}, {'body': 'If this problem is solved, it will be the most complete WYSIWYG editor.', 'author': 'dvlpr91'}, {'body': 'When you click on the image widget, how about show toolbar with the ability to insert an upper or lower line?', 'author': 'dvlpr91'}, {'body': '> When you click on the image widget, how about show toolbar with the ability to insert an upper or lower line?\r\n\r\n@dvlpr91, the following (or something similar) is what we want to achieve in the future:\r\nhttps://sdk.ckeditor.com/samples/magicline.html\r\n\r\nThat\'s a complex feature, so we\'re considering bringing something simpler first (""magic paragraph"").', 'author': 'fredck'}, {'body': 'Just for reference: Prosemirror solves this issue with a gapcursor plugin: https://github.com/ProseMirror/prosemirror-gapcursor/tree/master/src\r\n\r\nYou can see it in action here: https://apricot-ravioli.glitch.me/', 'author': 'mjadobson'}, {'body': ""@Reinmar Is the best way to insert the previous / next line by pressing the 'enter' key or the 'shift + enter' key while the image block is selected? (or keyboard directional key)\r\nThey are not available in mobile.\r\n\r\n(Because of my English level, there is a possibility of misunderstanding and talking about what I read.)"", 'author': 'dvlpr91'}, {'body': ""> @Reinmar Is the best way to insert the previous / next line by pressing the 'enter' key or the 'shift + enter' key while the image block is selected?\r\n\r\nI think it's not the best way. We introduced it only because we could do that quickly. We know that it's not accessible by mouse and on touch devices. We will work on a complete solution one day. We just needed to buy some time now, because a complete solution will take time."", 'author': 'Reinmar'}, {'body': ""@Reinmar I see. In fact, I didn't know much about it because I didn't check it out. I hope it goes well!"", 'author': 'dvlpr91'}, {'body': 'I have to install CKEditor 4 now thanks to this bug.\r\n\r\nThe Enter key idea is only work for the developer of webpage.  No one can find the Enter key solution  by themselves. \r\n\r\nWhy not just add a `""<p>&nbsp;</p>"" `under the image?', 'author': 'margorpi'}, {'body': ""Thanks for the feedback. We were aware it's only temporary and that it's far from perfect, but we have many other topics that we need to work on now.\r\n\r\nRegarding inserting an empty `<p>`, that's something we were considering but it's not a solution in many cases. E.g. when there's an image at the end of a table cell, if you'd add a paragraph there, there would be a blank line that you don't want to have there. Also, the problem with inaccessible places exists also between images and at the beginning of the content. We can't insert paragraphs everywhere.\r\n\r\nSo, it's tricky. We need to find a solution that doesn't break other features and doesn't pollute the content."", 'author': 'Reinmar'}, {'body': 'DUP reported in https://github.com/ckeditor/ckeditor5/issues/1546.', 'author': 'Reinmar'}, {'body': 'DUP reported in https://github.com/ckeditor/ckeditor5/issues/1621.', 'author': 'scofalik'}, {'body': 'DUP reported in https://github.com/ckeditor/ckeditor5/issues/1703.', 'author': 'scofalik'}, {'body': 'I played a bit with displaying ""magic blocks"" between widgets and at the beginning/end of the content and it works quite well. I use a view post fixer to add them and UIElement to render them (in a quite transparent way).\r\n\r\n![Apr-18-2019 10-33-34](https://user-images.githubusercontent.com/156149/56347870-850a3100-61c5-11e9-9e74-06168c4c511f.gif)\r\n\r\nIt fixes the <kbd>Ctrl</kbd>+<kbd>A</kbd> issue too:\r\n\r\n![Apr-18-2019 10-32-16](https://user-images.githubusercontent.com/156149/56347984-cac6f980-61c5-11e9-84a1-016f4e47f0d8.gif)\r\n\r\nAnd it helps in some other cases with the selection. I wonder if we could go this wway... to show them always between such blocks.', 'author': 'Reinmar'}, {'body': 'If those blocks would look good, then maybe... :trollface:. Maybe such blocks could be invisible when you do not have mouse pointer in proximity and we could show them dynamically? That would look kind of like the magic line from CKE 4.', 'author': 'scofalik'}, {'body': 'OK, I pushed the code to https://github.com/ckeditor/ckeditor5-core/compare/poc-magic-block. It should be used together with https://github.com/ckeditor/ckeditor5-engine/compare/t/1727 which resolves an issue that I stumbled upon: https://github.com/ckeditor/ckeditor5-engine/issues/1727.\r\n\r\nThe implementation is really simple. I use a view postfixer to add those blocks between widgets and at the start/end of the content. I render them using UIElements so the view layer knows that they are not part of the model. Finally, I handle clicking on those blocks by inserting a model paragraph at the block position. And that\'s it.\r\n\r\nSome ideas for improvements:\r\n\r\n* Definitely the styling.\r\n   * Those blocks could be easier to hover (bigger).\r\n   * However, they should not affect the flow of the page too much. They are going to affect the styling anyway (e.g. `.image + .image`) but we can\'t help with that. I\'d just recommend avoiding making them too big.\r\n   * They could indeed be invisible. However, I think they should appear when the user has the mouse somewhere close to them (discoverability)... which becomes complicated, so perhaps they should always be visible but less intrusive?\r\n* If you don\'t type in the paragraph which you created by clicking the magicblock, we could remove that paragraph.\r\n* It\'d be also great if those blocks were reachable by arrow keys. \r\n   \r\n   Example content: `<p>foo[]</p><image/><image/>`\r\n\r\n   1. Press <kbd>Right</kbd>. The first image gets selected.\r\n   2. Press <kbd>Right</kbd>. The magic block between those two images could get ""selected"" (it could even start blinking like a big horizontal caret). If you\'d start typing here, the text would appear in a new paragraph. The only problem at this stage is... where should the model selection be üòê (we don\'t allow a collapsed selection between blocks ‚Äì would that be an exception or would we insert a model paragraph temporarily?)\r\n   3. Press <kbd>Right</kbd>. The second image gets selected.\r\n* Make this implementation work with nested editables too. Currently, it only cares about the root element\'s children.', 'author': 'Reinmar'}, {'body': ""> They could indeed be invisible. However, I think they should appear when the user has the mouse somewhere close to them (discoverability)... which becomes complicated, so perhaps they should always be visible but less intrusive?\r\n\r\nI thought about giving them some padding, some negative margin and just using your typical on hover callback... Maybe that would be enough to make it work? I am also afraid about discoverability but in the case when you have an unreachable area you are going to move your mouse pointer in the space between images anyway.\r\n\r\n>  If you'd start typing here, the text would appear in a new paragraph. The only problem at this stage is... where should the model selection be\r\n\r\nI think that we could insert paragraph temporarily together with handling for this case:\r\n\r\n> If you don't type in the paragraph which you created by clicking the magicblock, we could remove that paragraph.\r\n\r\nOTOH: what if you wanted to have an empty paragraph there (for some reason, like, I can't believe I am writing this, but, _additional spacing_)?"", 'author': 'scofalik'}, {'body': ""> If you'd start typing here, the text would appear in a new paragraph. The only problem at this stage is... where should the model selection be\r\n\r\nThat's going to look really bad for real-time collab scenarios (although, we can perhaps hide it on other clients?). And you wouldn't like that paragraph in your data too, so we'd need to skip it in the data pipeline. If that's fine, then I'd go this way. I'd like to avoid exceptions in the selection post-fixer rules."", 'author': 'Reinmar'}, {'body': ""> OTOH: what if you wanted to have an empty paragraph there (for some reason, like, I can't believe I am writing this, but, _additional spacing_)?\r\n\r\nGood point. Also, if we'd always add (and keep that paragraph), if the user actually wants to remove it, that'd be really easy ‚Äì just press backspace/delete."", 'author': 'Reinmar'}, {'body': 'What if the image is floated (aligned to the side)? Are you displaying those blocks too then? If so, then what they look like?', 'author': 'oleq'}, {'body': ""They are normal elements in the content. We could do some tricks like also floating those blocks and giving them the same width as the images they surround.\r\n\r\nIn my POC they are displayed where the image would be if it wasn't floated. It's also where the block will appear if you click that magicblock so it's actually quite predictable."", 'author': 'Reinmar'}, {'body': 'Currently, when an image is selected, when the user presses `tab`, the caption field is selected. When pressing `tab` a second time, the focus of CKE is lost. May I suggest that in this case a new paragraph is inserted? Maybe the same when the user presses the `down arrow key` or the `right arrow key`? ', 'author': 'dirkjf'}, {'body': ""> May I suggest that in this case a new paragraph is inserted? Maybe the same when the user presses the `down arrow key` or the `right arrow key`?\r\n\r\nI'm afraid that could be a baffling behavior for screen reader users. Some concepts like focus cycling (using tab) or caret movement (arrows) are deep-rooted concepts that should not be changed unless absolutely necessary."", 'author': 'oleq'}, {'body': ""@Reinmar \r\n> They may have a minimal height (even `0px`) to not be visible when the selection is somewhere else. Thanks to that:\r\n\r\nIs it possible what minimal height isn't working for selection? I'm getting magic block and image both selected after image click."", 'author': 'lasfin'}, {'body': ""No, it's this bug: https://github.com/ckeditor/ckeditor5-engine/issues/1727 which requires this change: https://github.com/ckeditor/ckeditor5-engine/compare/t/1727. No official PR for it yet because this change requires documentation and tests."", 'author': 'Reinmar'}, {'body': 'Hi @Reinmar,\r\n\r\nHave you found a solution to this problem? I am also struggling for a work-around for a few days now, but whatever I check, I got stuck ;) To be honest, it is a basic requirement, to be able to continue editing after inserting an image. The lack of this prevents us to adopt CKEditor 5 in our new project. It cannot be unsolvable.\r\nSee  my comment for #2067.\r\nThank you,\r\n  Zsolt', 'author': 'gkzsolt'}, {'body': ""The only solution right now is to press Enter or Shift+Enter when having that image selected. That's the workaround we introduced some time ago. It's not meant to be the target solution, but it was possible to implement it quickly.\r\n\r\nA full solution (something like https://github.com/ckeditor/ckeditor5/issues/407#issuecomment-484408847) will be one of our priorities during the upcoming months. I think it's quite safe to assume this will land in Q1 2020. There's a slight chance it will land sooner than that, but the end of the year is always crazy, so dunno about this."", 'author': 'Reinmar'}, {'body': 'Hi! Our users complained they were stuck after adding an image and could not add anything else. \r\n\r\nUntil the full solution is finished I found that adding help text solves the discoverability issue with the <kbd>SHIFT</kbd>+<kbd>ENTER</kbd> and <kbd>ENTER</kbd> keyboard shortcuts. The trick to avoid adding visual clutter is to only show it when the text either starts or ends with a figure. \r\n\r\nWithout a figure nothing changes:\r\n![nofig](https://user-images.githubusercontent.com/7013911/66653982-3505a780-ec07-11e9-9cef-f6a892451c8c.png)\r\n\r\nFigure in the middle of text, nothing changes:\r\n![textmiddle](https://user-images.githubusercontent.com/7013911/66654073-6f6f4480-ec07-11e9-9e1d-d1581c315ea7.png)\r\n\r\nNo text above the figure:\r\n![notoptext](https://user-images.githubusercontent.com/7013911/66654774-f2dd6580-ec08-11e9-9019-f9c4856be2ff.png)\r\n\r\nNo text on either side:\r\n![both](https://user-images.githubusercontent.com/7013911/66654899-28824e80-ec09-11e9-980d-3bd41b8fb1cf.png)\r\n\r\nHere is a simplified code example using bootstrap:\r\n\r\nhtml:\r\n```html\r\n<div id=""fig-help-top"" class=""alert alert-danger mb-0"" role=""alert"">\r\n  Note: to add text above the figure, select the figure and press SHIFT+ENTER\r\n</div>\r\n\r\n<textarea id=""editor""></textarea>\r\n\r\n<div id=""fig-help-bottom"" class=""alert alert-danger"" role=""alert"">\r\n  Note: to add text after the figure, select the figure and press ENTER\r\n</div>\r\n```\r\n\r\njavascript:\r\n```javascript\r\nfunction refreshHelper(text){\r\n  var showStart = text.startsWith(""<figure"");\r\n  var showEnd = text.endsWith(""</figure>"");\r\n  \r\n  // show/hide the divs using jQuery, Vue, etc...\r\n  \r\n}\r\n\r\nClassicEditor\r\n    .create( document.querySelector( \'editor\' ))\r\n    .then( function(editor) {\r\n        refreshHelper(editor.getData());\r\n        editor.model.document.on( \'change:data\', function( evt, data ) {\r\n            refreshHelper(editor.getData());\r\n        } );\r\n    } );\r\n```\r\nIts not perfect but new users were able to work with that without staying stuck. For our project this was sufficient.', 'author': 'robido'}, {'body': 'Hi guys,\r\n\r\nJust before you decide that Enter or Shift enter when on an image solves the problem, please very much be aware that this does not work when the image floats, for example having ""side"" alignment. Please, please do test with it with side aligment as well. A single image on one row is not enough to have for a decent design...\r\nThank you,', 'author': 'gkzsolt'}, {'body': '@Reinmar, I like the idea of ""magic blocks"", do they work also when the image floats?', 'author': 'gkzsolt'}, {'body': ""Hi there ! Love so much Ckeditor 5, thanks for your hard work on this hot topic \\o/ This is an issue almost every customers and testers noticed and complained about when using our CMS ( https://fireblogcms.com/ , a CMS headless dedicated to blogging with a GraphQL API ) : when a media is inserted at the very bottom of the editor (instagram widget, image, video), people remain stucked and can't figure out by themselves out to create a new paragraph. Before trying to hack this in our own way, can you confirm that resolution of this complex issue is still not planned for now ?\r\n\r\nMaybe a simple workaround for us could simply to add a paragraph at the end of the editor when people click on this area , can we do this with ckeditor API ?\r\n\r\nPS : +1 for @gkzsolt comment on floating images "", 'author': 'yann-yinn'}, {'body': '@Reinmar \r\n\r\nEdit: I stopped being lazy and read this thread, it seems the consensus is that the current solution is already considered to be unsatisfactory. I copied this comment mostly verbatim from an issue I opened talking about the same thing. I see your aiming for Q1 2020 - I think this is really important to fix ASAP.\r\n\r\nContinuation...\r\n\r\nThis is a very unusable and unintuitive solution. From plentiful experience, I guarantee that we\'ll receive support tickets from confused users about this. You should not have to refer to a shortcut that isn\'t obvious in order to do basic things like add a line before a table.\r\n\r\nPlus, should not the fact that you\'ve received an issue report be evidence enough that a more user-friendly and intuitive solution is necessary? I actually played around for a few minutes trying to figure out if you\'d added some kind of shortcut for it, and I could not find one. That alone is indication of poor UX.\r\n\r\nCould it not be possible to have a ""virtual"" caret position, before a widget? Or, perhaps, a ""virtual"" line, which can be selected WITHOUT selecting the table? In almost ANY text editor, you can select newline characters. But CKEditor goes against the grain, there.\r\n\r\nIt would be so much more intuitive if you hooked onto the ""Left"" or ""Right"" arrow keys and, if the caret is on the table, add a new line before it.\r\n\r\nThis is was Slack do, now that they support WYSIWYG.\r\n\r\nMicrosoft Word handles this a bit differently, though, it is still somewhat intuitive. They have a little drag handle, which looks similar to CKEditor\'s Table selection handle. You can just drag the table down, even if there are no lines after the table. It will create enough lines for you to place the table where the user dropped it. If they did what Slack did, AND had the drag handle, then that would be even better.\r\n\r\nEither way, the current solution is poor. You cannot expect users of CKEditor to pass on a list of instructions on how to use a simple WYSIWYG on any software CKEditor is integrated in.\r\n\r\nCKEditor is such a well-made piece of software, but there\'s these rough edges which are concerning, and may even necessitate a switch to a different piece of software by vendors if they are not addressed.\r\n\r\n@yann-yinn  - completely agree. This is not a good solution.', 'author': 'CaelanStewart'}, {'body': 'This week I got the same kind of issue: a customer was totally blocked after inserting a table at the end of the editor. In this case hitting ""_enter_"" after selecting table does not work, and i had to solve the problem myself :  cut the table, insert a paragraph, move cursor up, paste the table. (beyond that, table widget is pretty impressive and customer managed to create a complex table with some complex stuff inside without any issues, great job guys! )', 'author': 'yann-yinn'}, {'body': 'Hey there, hope this might help some people, here is what I tried for our editor to insert automatically a new empty paragraph when inserting an image, blockquote, media or table at the end of the doc. This way, you can just click on the empty paragraph after the media to continue writing.\r\n\r\nHeavily inspired by https://github.com/ckeditor/ckeditor5/issues/1255#issuecomment-423499870\r\n\r\n```js\r\n      editor.model.document.on(""change:data"", (eventInfo, data) => {\r\n        // Insert automatically a paragraph after an image or a block,\r\n        // Otherwise redactors are stuck at the bottom of the page and\r\n        // can\'t add a new line.\r\n        //\r\n        // No idea what i am doing, here, i mainly copy-pasted this code:\r\n        // https://github.com/ckeditor/ckeditor5/issues/1255#issuecomment-423499870\r\n        // and made some little changes\r\n        const changes = editor.model.document.differ.getChanges();\r\n        editor.model.change((writer, data) => {\r\n          for (const entry of changes) {\r\n            // if an image, table, blockQuote or media is inserted.\r\n            if (\r\n              entry.type === ""insert"" &&\r\n              [""image"", ""table"", ""blockQuote"", ""media""].includes(entry.name)\r\n            ) {\r\n              // Get last node of the doc\r\n              const docNodes = entry.position.root._children._nodes;\r\n              const lastDocNode = docNodes[docNodes.length - 1];\r\n              // add a empty paragraph automatically if this the last node of the doc.\r\n              if (lastDocNode.index === entry.position.index) {\r\n                const position = entry.position.nodeAfter;\r\n                const paragraph = writer.createElement(""paragraph"");\r\n                writer.insert(paragraph, position, ""after"");\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n```', 'author': 'yann-yinn'}, {'body': ""Hi @yann-yinn,\r\n\r\nthis is a good idea, but it could be improved a little. First, you are using some private properties here, which isn't a good practice. Second, this kind of code should be introduced as a post-fixer (you can read about post-fixers here: https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#function-registerPostFixer).\r\n\r\n`if (lastDocNode.index === entry.position.index) {` This might be incorrect in some edge cases if you are just checking indexes. Also, it is better not to narrow down to root only. I'd check if the image is the last element of it's parent, not matter what the parent is. This way you also fix the issue for table cells and probably other cases that might come up in future.\r\n\r\nSo, instead of the condition you suggested, I'd go with this:\r\n\r\n```plaintext\r\nconst insertedElement = entry.position.nodeAfter;\r\n\r\nif ( !insertedElement.nextSibling ) {\r\n\twriter.insertElement( 'paragraph', insertedElement, 'after');\r\n} \r\n```\r\n\r\nLet me know if that works for you."", 'author': 'scofalik'}, {'body': '@scofalik yes, thanks a lot for your help ‚ù§Ô∏è . It seems to work like a charm, and this is a huge UX improvment for our writers üëç . (edit: and yep, thanks to your condition, automatic new lines also works inside a table, so cool :) )\r\n\r\nHere is my final code\r\n\r\n```js\r\n      editor.model.document.registerPostFixer(writer => {\r\n        // Insert automatically a paragraph after an image or a block,\r\n        // Otherwise redactors are stuck at the bottom of the page and\r\n        // can\'t add a new line.\r\n        // @see https://github.com/ckeditor/ckeditor5/issues/407#issuecomment-602111695\r\n        const changes = editor.model.document.differ.getChanges();\r\n        editor.model.change(writer => {\r\n          for (const entry of changes) {\r\n            // if an image, table, blockQuote or media is inserted.\r\n            if (\r\n              entry.type === ""insert"" &&\r\n              [""image"", ""table"", ""blockQuote"", ""media""].includes(entry.name)\r\n            ) {\r\n              const insertedElement = entry.position.nodeAfter;\r\n              if (!insertedElement.nextSibling) {\r\n                writer.insertElement(""paragraph"", insertedElement, ""after"");\r\n                // According to the ckeditor doc,  we have to return true\r\n                // if some changes have been made by our postFixer\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      });\r\n```', 'author': 'yann-yinn'}, {'body': ""I closed #6618 as a DUP of this ticket because the only solution that I'd accept here is one which also works well with arrow keys."", 'author': 'Reinmar'}, {'body': 'DUP reported in #6704.', 'author': 'Reinmar'}, {'body': ""For those who participated in this issue, I just wanted to let you know that the feature is being developed and the MVP already landed in `master` branch of the project üéâ\xa0\r\n\r\nThere are still tons of improvements down the road (keyboard support in particular) so stay tuned.\r\n\r\n![](https://user-images.githubusercontent.com/1099479/81956474-a37e6e00-960b-11ea-9dd5-3b5cdd094ffa.gif)\r\n\r\nIf you're interested in remaining issues, you can find them under a [dedicated label](https://github.com/ckeditor/ckeditor5/labels/squad%3Amagic)."", 'author': 'oleq'}, {'body': ""Looks great!\r\n\r\nPerhaps it's just me, but the arrow seemed to me at first sight unintuitive.\r\n\r\nWhat I'm primarily trying to do is to put some text above the image, so I would expect the arrow to point upwards (in direction of my desired action). The fact that this action moves the image down (downward arrow) is just incidental."", 'author': 'zadam'}, {'body': '> What I\'m primarily trying to do is to put some text above the image, so I would expect the arrow to point upwards (in direction of my desired action). The fact that this action moves the image down (downward arrow) is just incidental.\r\n\r\nWe considered arrows but they looked a lot more like ""move this image one block up/down"". The ""enter key"" arrow is not perfect too, but we couldn\'t think of a better icon so far.', 'author': 'Reinmar'}, {'body': 'Does this fix allow to insert anything **after an image** ? We are waiting for this possibility for almost a year already, and _can not upgrade to ckeditor 5_ because it is unusable this way. There are tons of duplicate reports, and I see talking about ""unaccessible places"", ""magic lines"", a.s.o. many things I don\'t follow, but one use case is very simple: \r\n\r\n**You create a document, insert an image at the end and then cannot continue. You are doomed, there is no way to get past that image.**\r\n\r\nAt least that was the situation last autumn/winter. So not _before_ the image, and not a text _inline with_ the image. A text below the image. Is that possible?\r\n\r\n', 'author': 'gkzsolt'}, {'body': ""You can select the image and press Enter (to insert after the image) or Shift-Enter (to insert before the image).\r\n\r\n> Does this fix allow to insert anything **after an image** ?\r\n\r\nStill, I'm also curious about this question."", 'author': 'neongreen'}, {'body': '> Does this fix allow to insert anything **after an image** ?\r\n\r\nYes. It inserts a paragraph. You can start typing or insert another image, table, etc.', 'author': 'oleq'}, {'body': ""@oleq great work I can't wait to try it out!"", 'author': 'robido'}, {'body': '@oleq thank you so much, another huge ux improvement for ckeditor :D !', 'author': 'yann-yinn'}, {'body': ""The tooltip seen on hover for this item doesn't appear to be localized yet, FYI\r\n![image](https://user-images.githubusercontent.com/22718637/83836372-d8d12580-a6b8-11ea-9646-f07fbe93ffcc.png)\r\n"", 'author': 'otherblandart'}, {'body': '@otherblandart The feature is new and it will take some time for translations to arrive. Stay tuned or... if you want to contribute to the project, you can [translate these labels](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/contributing/contributing.html#translating) by yourself.\xa0\r\n\r\nThanks for your notice!', 'author': 'oleq'}, {'body': ""We extended the feature with another way to reach the space before/after a block ‚Äì now the arrow keys can do that too.\r\n\r\nWe'll keep working on improving this concept, but I now consider the base case closed :) Finally üéâ\r\n\r\n![](https://user-images.githubusercontent.com/156149/85262806-948ea500-b46e-11ea-9f77-cc955c9342b7.gif)"", 'author': 'Reinmar'}, {'body': 'You can see the potential followups in https://github.com/ckeditor/ckeditor5/labels/squad%3Amagic.', 'author': 'Reinmar'}]","['type:bug', 'type:improvement', 'type:feature', 'package:widget', 'support:2', 'domain:accessibility', 'Epic', 'squad:magic']",CLOSED,407.0,['331']
ckeditor,ckeditor5,Implement list styles,"The user should be able to choose the style of a list.

E.g. a bulleted list may use circles, squares, dots, etc. as its bullets. A numbered list can use roman, lower-roman, decimal, etc.

Also, there's a [`list-style-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-position) and custom numbering using CSS counters.

## Markup

This feature is about styles, but we cannot tell what styles precisely (as I mentioned above it can be the list style type, but also more styling can be used). Therefore, it seems to be a good idea if this feature will use classes (on `<ol/ul>` elements) because it gives the most flexibility.

## Styling nested lists

Document editors like GDocs allow styling more than one list at a time:

![image](https://user-images.githubusercontent.com/156149/40367036-c3acf66e-5dd8-11e8-941e-de368187567f.png)

This ensures better consistency between documents and, in general, may bring a better UX to the user. We could consider how this can be implemented by us (if we'll use classes then it should be pretty straightforward).

## UI

To be discussed.

Related: https://github.com/ckeditor/ckeditor5/issues/1028#issue-325032492



",Reinmar,['pomek'],"[{'body': '@Reinmar \r\n\r\nWe also in an eed of providing such roman numbers and lower alpha lists in CKEditor5. Is it being developed and available to use now? ', 'author': 'SKGGitHub'}, {'body': ""This is the only reason I don't use CKEditor in my projects"", 'author': 'ymsstudios'}, {'body': 'Ping - please ', 'author': 'skerbis'}, {'body': 'That is a important feature like dl dd dt text lists.', 'author': 'joachimdoerr'}, {'body': 'My team needs this too üëç ', 'author': 'tbredin'}, {'body': 'This is a very important feature - indents have FULL outline#ing path - because we often in chats amongst colleagues say things like - ""see 1.2.2.3 - we need to change the color...."".\r\n\r\nWith multipage documents, it really impossible to know the full #ing.  \r\n\r\nALSO - and I don\'t know this would be a new issue/thread or relate here, but it would be EXTREMELY HELPFUL to be able to ""collapse"" an indent.  Is that currently possible at all?  Is this an issue that has been raised before?\r\n\r\nThanks!', 'author': 'dick-airlink'}, {'body': 'From our point of view it is the only missing feature to call CKE5 a professional editor.  ', 'author': 'skerbis'}, {'body': ""@joachimdoerr In reply to https://github.com/ckeditor/ckeditor5/issues/5653#issuecomment-549047594: list styles is indeed a nice feature that we'd really like to have in v5. However, as a team, we don't have unlimited time so the features we can ship each release are unfortunately limited. For instance, this release we're preparing much anticipated code blocks feature, alongside with table styling which is critical foundation for our further table improvements.\r\n\r\nIn case this feature is critical for your business you can also [contact us](https://ckeditor.com/contact/) to check if there is any way to speed up the development of the feature you or your customer needs.\r\n\r\nThat being said, list styles feature is on our radar for some time, and we definitely want to have it implemented soon. But we don't have any precise ETA now."", 'author': 'mlewand'}, {'body': ""@mlewand thanks for your answer. I work only in open source context with your product because in the professional usage it is not usable without that list styling option. It is really unfortunate that your focus isn't exactly on the important basic functions. With all basics your product will be get the first place on the list of rich text editors."", 'author': 'joachimdoerr'}, {'body': ""@joachimdoerr happy to hear that you do open source too. In this case there's also a straight way to speed things up: we're open for pull requests, so feel free to contribute to the feature of your choice."", 'author': 'mlewand'}, {'body': '> It is really unfortunate that your focus isn\'t exactly on the important basic functions.\r\n\r\nWe follow the feedback that we get from the community and our business partners. For us, ""important"" means things that most people/companies request. This specific feature is high on this list but there were ones which are higher and we focus on those at the moment. As soon as we\'ll resolve those blockers, we will be able to focus on list styles. \r\n\r\n> With all basics your product will be get the first place on the list of rich text editors.\r\n\r\nThat\'s our goal but it does not happen overnight ;) There are as many use cases as there are projects out there so we have to gather feedback, listen to it but still make decisions that will best work in a long term\r\n\r\n> so feel free to contribute to the feature of your choice.\r\n\r\nI\'d add that to increase the likelihood of such a contribution landing in the official code base, it helps if it\'s designed and implemented in sync with the core team. If you\'d be considering investing your time in it, please ping us so we can share some thoughts. But it\'s, of course, completely fine if it just stays a 3rd party addition (and it\'s easier this way).', 'author': 'Reinmar'}, {'body': 'I wonder if this thread also covers a similar issue with lists (mostly numbered lists) - atm there is no way to change numbering color/font-style/font-weight etc. So when the user changes styles of text within list item (like color), the color of the numbers does not change(and there is no other way to change it). \r\n\r\nThis problem has been very frustrating for our users and I would like to know if it is on the roadmap and part of this issue.\r\n\r\nI was going to implement some plugin to fix this based on Font and/or List plugins, but it seems like a pretty challenging task to do. I would appreciate some advice and directions on how this can be implemented and if it is possible at all at the current state of the ckeditor5.\r\n', 'author': 'pshurygin'}, {'body': ""That's a separate issue. It's how browsers render list bullets/numbers. None of the HTML-based editors I know handle this as it's pretty ugly. But with CKEditor 5's engine features we could actually solve this. Please report a separate ticket for this so we can discuss it there."", 'author': 'Reinmar'}, {'body': '@Reinmar created a new ticket here: https://github.com/ckeditor/ckeditor5/issues/5752', 'author': 'pshurygin'}, {'body': ""Hi, can we know about the timeline for this feature development? I along with my team even had a meeting with your team about some features and Ckeditor5 is going to be our editor prime time even for professional usage. Please give us a timeline of this feature, it's long overdue. Thank you. "", 'author': 'mikr13'}, {'body': '@MiKr13 please contact the CKSource team using the means that you used previously (most likely, through the contact form or support@cksource.com). This will allow the team to respond with necessary details.', 'author': 'Reinmar'}, {'body': '@Reinmar what is the status of this feature?', 'author': 'joachimdoerr'}, {'body': 'Any advance here???', 'author': 'rootlinux2'}, {'body': 'I like CKE5 but because of the missing ""standard"" formatting features, I can use it not the way I and our editors would like. \r\nBecause of the missing list features our editors can not use it for complex documents. \r\n', 'author': 'skerbis'}, {'body': 'Because I have requested this feature numerous times for several years, I would guess this will never happen.A real pity. I\'m assuming that it is perhaps either impossible to do or that just too few of us really need it and/or have voiced our support of it.I\'m 67, so I must pass the torch to a younger generation of seekers. Hopefully I will be able to peer in from the great beyond from time to time to see if they have arrived into the promised land.Godspeed to you all.On Jul 8, 2020 2:08 AM, Thomas Skerbis <notifications@github.com> wrote:\nI like CKE5 but because of the missing ""standard"" formatting features, I can use it not the way I and our editors would like.\nBecause of the missing list features our editors can not use it for complex documents.\n\n‚ÄîYou are receiving this because you are subscribed to this thread.Reply to this email directly, view it on GitHub, or unsubscribe.', 'author': 'dick-airlink'}, {'body': ""I switched to TinyMCE because of this. I have given Ckeditor5 as other option in my app, whichever client wants to use. It's great that data is compatible between these two completely. "", 'author': 'mikr13'}, {'body': 'Hi all! I know it\'s disappointing if a single feature missing in the product makes that product unusable in your case. I also understand how bizarre it may seem that CKE5 still does not implement this feature.\r\n\r\nYet, here we are, still planning it, among many other things.\r\n\r\nBut to move things forward, I\'d like to ask you for feedback on what do you actually expect from ""List styles"". It\'s a wide topic and for sure we won\'t be able to tackle it all at once. I\'d like to ensure that we get the most in the shortest time.\r\n\r\nI can see the following sub-features:\r\n\r\n*   **(A)** ability to change the type of bullet (dot, circle, square, etc.) or number (decimal, roman, whatever) of a single list item or all selected items,\r\n*   **(B)** ability to change the start number of a numbered list (option **B2**: the ""reverse"" option),\r\n*   **(C)** ability to have lists automatically numbered like this `1.`, `1.1.`, `1.2.`, `1.2.1.`, ...,\r\n*   **(D)** ability to chose one of predefined setups of entire list with nested lists (like what you have in e.g. Google Docs, when you can at once define that the first level will use dots, the second level will use circles, etc.),\r\n*   anything else?\r\n\r\n**Please write** which of these (A, B, B2, C, D) are must-have, nice-to-have or I-dont-care to you.\r\n\r\n**Also,** I\'d be interested whether you\'d like this feature to use classes or inline styles.\r\n\r\nYour feedback will help us properly prioritise these sub-features. Thank you in advance!', 'author': 'Reinmar'}, {'body': '(A) is the biggest feature missing. Change form 1. 2. to a) b) oder I II IV ..  inside the list level\r\nI think (B), (C) and (D) will be very difficult to implement in html context. But, it would be very very cool üòÉ\r\n\r\n> Also, I\'d be interested whether you\'d like this feature to use classes or inline styles.\r\n\r\nClasses would be nice and let us keep the markup ""cleaner""\r\n', 'author': 'skerbis'}, {'body': 'From my opinion (A) and (C) get the most benefit for users.', 'author': 'joachimdoerr'}, {'body': ""I'd like to add that we receive quite a lot of requests where list styles are mentioned in the context of Paste from Word support. It looks like it is expected that CKEditor supports not only editing list styles in CKEditor itself, but that CKEditor has also a decent support for pasting content from MS Word that contains styled lists in MS Word.\r\n\r\nWhen adding a reply please confirm if a very good support for pasting lists from MS Word is also important for you."", 'author': 'wwalc'}, {'body': 'In my case (A, B, C)\r\n![image](https://user-images.githubusercontent.com/24574267/86941828-6669c000-c112-11ea-8f9e-41113a51dab2.png)\r\n\r\n', 'author': 'rootlinux2'}, {'body': '* [x] Research: https://github.com/ckeditor/ckeditor5/issues/7736 \r\n* [x] Feature editing part: https://github.com/ckeditor/ckeditor5/issues/7801\r\n* [x] Feature UI part: https://github.com/ckeditor/ckeditor5/issues/7803\r\n* [x] Docs: https://github.com/ckeditor/ckeditor5/issues/7804', 'author': 'pomek'}, {'body': 'dfdfffff****\r\ndgdf\r\n\r\n- gfgfdg\r\n\r\n- gfgfgfg\r\n\r\n- gfgf\r\n\r\nfgfgfgfg\r\ndgfd\r\n\r\n1. dgdfg\r\n2. fgfhf\r\n3. [https://youtu.be/aMoBxEUmcjA](url)', 'author': 'CZKishan'}]","['type:feature', 'package:list', 'support:2', 'Epic', 'squad:core']",CLOSED,1031.0,['1028']
ckeditor,ckeditor5,Implement ordered lists start index and reverse order options,"Beside [list styles](https://github.com/ckeditor/ckeditor5/issues/1031) the other two important list settings are:

*   the start index (controlled in HTML by the `start` attribute),
*   the order (controlled by the `reversed` attribute.

Setting them may be required in some specific cases, especially when creating ""documents"".

Note to self: Don't forget about a follow-up with support for MSWord.",Reinmar,[],"[{'body': 'Microsoft word has this feature user can change index number numberedList , the Writer who has ms word skills will miss this feature, in some scenario writer has to change index number  ', 'author': 'raoshahid799'}, {'body': ""I was looking for a way to implement a method to set the start number for lists and came across this.\r\nI see this issue has been open for almost 3 years and is categorized as a nice-to-have.\r\nFor my application it's critical to adjust the numbers since there are html elements between lists.\r\nWill the option to adjust the start number ever be implemented?"", 'author': 'MPIIIMan'}, {'body': 'This feature has been released in CKE5 v32.0.0: https://ckeditor.com/docs/ckeditor5/latest/features/lists/lists.html#list-properties', 'author': 'Reinmar'}]","['type:feature', 'package:list', 'support:2', 'Epic', 'squad:core', 'domain:v4-compatibility']",CLOSED,1032.0,['1031']
ckeditor,ckeditor5,Inline images - support multiple images in a single block,"## Is this a bug report or feature request? (choose one)

üÜï Feature request

## üíª Version of CKEditor

CKEditor version 5, decoupled document build

## üìã Steps to reproduce

1. insert one small image
2. insert another small image

## ‚úÖ Expected result
Two small images should be in same line with space e.g. Image1   Image2

## ‚ùé Actual result

Currently they are stacked up from top to bottom.

---

## Future work
MVP step 2: https://github.com/ckeditor/ckeditor5/issues/8666
Nice to have features: https://github.com/ckeditor/ckeditor5/issues/8712

---

If you'd like to see this feature implemented, add üëç to this post.",ateeqsuhail,[],"[{'body': 'any work around/alternative for the time being?', 'author': 'ateeqsuhail'}, {'body': 'As ateeqsuhail said is there any workaround to make it work for now ?', 'author': 'PascalMarechal'}, {'body': ""I developed my own plugin for this. I used the image plugin as example and tried to reuse as much code as possible. The schema of course is different:\r\n```js\r\nschema.register('inline-image', {\r\n\t// Allow wherever text is allowed:\r\n\tallowWhere: '$text',\r\n\r\n\t// The image will act as an inline node:\r\n\tisInline: true,\r\n\r\n\t// The inline widget is self-contained so it cannot be split by the caret and can be selected:\r\n\tisObject: true,\r\n\r\n\tallowAttributes: ['alt', 'src', 'srcset']\r\n});\r\n```"", 'author': 'kleinph'}, {'body': 'I have downgraded to version 4, since it has all the features.', 'author': 'ateeqsuhail'}, {'body': ""Hello @kleinph,\r\nCan you share your plugin ?\r\nThank's"", 'author': 'castroCrea'}, {'body': 'I am not entirely sure, because I built this for a former employer. Also its not 100% perfect.', 'author': 'kleinph'}, {'body': 'One very valid use case that requires supporting inline images reported by our customer: in an internal application for sending messages many times users start an email from copying/pasting content from other sources/emails.\r\n\r\nIn those quoted emails, people have in the footer links to socials that consist of separate small inline (linked) images:\r\n\r\n<img width=""184"" alt=""Screen Shot 2020-09-17 at 8 59 54 PM"" src=""https://user-images.githubusercontent.com/545175/93515386-cbb70a00-f928-11ea-806e-4cd4c1df0aac.png"">\r\n\r\nwhen those images are pasted, they become block images that take the whole width of the page, which of course looks wrong.', 'author': 'wwalc'}, {'body': ""Another valid use case: Inline images should sometimes be used as 'letters', as for example in the attached screenshot of article about ancient number systems. It was written in CKE4 :(.\r\n\r\n![number_systems](https://user-images.githubusercontent.com/1151251/97086702-4c061480-1625-11eb-9688-d1c1e9df6aa4.png)\r\n"", 'author': 'milossramek'}, {'body': 'We discussed with @oleq some UX aspects of this feature.\r\n\r\n*   The inline images feature should be optional (opt-in) and, most likely, will not be part of any of the builds.\r\n*   An image must be either inline or block. It needs to be clear from the perspective of a model structure where that particular image is allowed and those checks must be done based on element names.\r\n*   Moreover, for a sane UX, it may also be good to differentiate both image modes and allow toggling between both states in an explicit manner. We should avoid similar pitfalls that we fell into in CKE4 where it\'s unclear why a certain image can be dragged as a block (between blocks) and another one as an inline object (within a text). In CKE4 the user can turn an inline image into a block image but it\'s impossible to turn a block image back to an inline image.\r\n*   Therefore, we consider adding a toggle button into the image toolbar for controlling whether it\'s inline or block. Toggling it may also disable other options such as whether the image can be aligned.\r\n*   When a block image is transformed into an inline image, it should simply be wrapped with `<p>` (other option: merged to a nearby block).\r\n*   When a captioned image is transformed into an inline image, its caption should be removed _visually_ and from the data but it can stay present in the model so when the user toggles back the caption appears. This is to save users from losing the caption content. Note: caption will be lost during copy-paste as it\'s not present in the data unless we decide to keep it as some attribute.\r\n*   The most challenging aspect of this feature is the UX around inserting images. How can the user decide to insert an image in the middle of a block?\r\n    *   By default, the editor should be configured to insert block images as this seems to still be the most frequent scenario. We might do this configurable for developers, but it would still not make the workflow easy for users when they insert block/inline images 50/50.\r\n    *   We might implement some modifier (Alt/Shift) that\'d:\r\n        *   change the behavior on paste,\r\n        *   change the face and behavior of the ""insert image"" icon to insert inline images,\r\n    *   Memorize the selection position and content before the insertion so, even though the image is inserted like a block, when the user clicks the ""turn into inline"" button that block-level insertion will be reverted and the image will be reinserted as an inline image, thus saving the user from having to manually merge split blocks or cut-paste an image from outside of the block to inside it.\r\n    *   But, most importantly, we can also do nothing here (in an MVP), if we ensure that an inline image, when copied, is pasted as an inline image. The workflow will still not be the greatest (you insert as a block and then fix manually by cut-paste), but the user will be able to achieve what they want in a reasonably quick way.', 'author': 'Reinmar'}, {'body': ""More notes:\n\n* We need a new element in the schema due to the fact that this element will be allowed where $text is allowed and the `<image>` element isn't. Also, `<image>` can contain `<caption`> while inline image cannot.\n* In the data, we should output just `<img>` without `<figure>`."", 'author': 'Reinmar'}, {'body': ""More notes: We need to design a heuristic for detecting whether an image that's being inserted is inline or not. Some examples:\r\n\r\n*   images in empty blocks,\r\n*   images with small width/height."", 'author': 'Reinmar'}, {'body': 'About heuristic, I think that should be something simple and predictable, so users will always know what will happen. The best will be only one detection rule. Detecting using with/heigh leaves too much ambiguity: why this 50x50px inserted image is inline, and 55x55px image inserted next to it is a block? What should be the size limit? I propose detecting only by the place of insert: Inline between text or in a list, block in an empty paragraph. After analyzing feedback from the users I see that the most popular use case for this feature is to just insert an image between text.\n\nThere is also one thing to discuss: Inline/block switch Icon location and design. For the location, the balloon seems to be reasonable. But we need someone to design the infographic.\n\n![Screenshot_33.png](https://images.zenhubusercontent.com/5f75bb650f9211d7dd8f238c/121f1b9c-7319-4e10-8dec-40905248eb9a)', 'author': 'pkwasnik'}, {'body': 'üõ† It\'s been a while since the last update, so here are the highlights from the past couple of months.\xa0\r\n\r\nP.S. You can check out the latest code in the live [feature branch](https://github.com/ckeditor/ckeditor5/pull/9236).\xa0\r\n\r\n## What\'s new?\r\n\r\n### Inline image insertion and resize\r\n\r\nThe editor not only accepts inline images but provides feature parity between block and inline images. Both types of images can be uploaded, styled, resized, alt-texted, and support `srcset` (responsive images) out of the box.\r\n\r\n![](https://user-images.githubusercontent.com/1099479/111477159-1f1ae100-872f-11eb-9b41-e623ee50b146.gif)\r\n\r\n### Adding captions to inline images (inline->block conversion)\r\n\r\nInline images cannot be captioned but users can quickly turn them into blocks by adding the caption. The caption is preserved between various image styles (turning a captioned image into inline, then back to block will preserve the content of the caption).\r\n\r\n![](https://user-images.githubusercontent.com/1099479/111477389-59847e00-872f-11eb-9230-a4de646e2d1e.gif)\r\n\r\n### New image styles\r\n\r\nThe `ImageStyle` plugin has been refined and offers more styles that reflect real-life scenarios. By default, images can ""be in line"" (like emoji), ""wrap text"" (both inline and block images) or ""break text"" (only block images).\r\n\r\n![](https://user-images.githubusercontent.com/1099479/111478545-77061780-8730-11eb-8eb8-b652ef43e300.gif)\r\n\r\n## TODOs\r\n\r\nAlthough the core of the feature is ready, there are still a couple of major of tasks down the road:\r\n\r\n*   [Unification of the widget insertion UX](https://github.com/ckeditor/ckeditor5/issues/9102) (it will affect more than just images),\r\n*   [Clipboard support](https://github.com/ckeditor/ckeditor5/issues/8659) (for instance, paste integration with Word, Google Docs, etc.),\r\n*   [Integration with the link feature](https://github.com/ckeditor/ckeditor5/issues/8871),\r\n*   [The new feature guide](https://github.com/ckeditor/ckeditor5/issues/8591) (to showcase new features and also to help developers migrate)', 'author': 'oleq'}, {'body': ""üì¢ I have some good news I would like to share with anyone interested in this feature üì¢\r\n\r\nAfter over half a year of development, the core of **inline images has been merged to `master` and it will ship in the upcoming release of CKEditor 5 üéâ**.\r\n\r\n**TL;DR:** [**See inline images in action**](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/features/images/images-overview.html).\r\n\r\n![](https://user-images.githubusercontent.com/1099479/122579656-68900a80-d055-11eb-82b4-5d5a11b24854.gif)\r\n\r\nHere are some highlights:\r\n\r\n*   Inline images work with all core editor features (also collaborative features such as [Real-time collaboration](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html) or [Track Changes](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/track-changes/track-changes.html)). They are also enabled out-of-the-box in all [official editor builds](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/builds/guides/quick-start.html).\r\n*   Depending on the context, the editor will pick the right type of image to insert (upload). For instance, inserting an image into an empty block will create a block image but inserting an image in the middle of text will create an inline image to avoid splitting the paragraph. [This behavior is configurable](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/api/module_image_imageinsert-ImageInsertConfig.html#member-type).\r\n*   We realized over the course of development that the current default image styles set doesn't work well with inline images. A new one was created from scratch to better reflect real use-cases. Also, to make the configuration easier, we categorized default image styles and grouped them in [configurable drop-downs](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/api/module_image_image-ImageConfig.html#member-styles).\r\n*   We also realized that the current UX of adding image caption only when the image gets selected does not work well in the context of inline images (and new image styles). From now on image captions are toggled on demand using a toolbar button, which also prevents the editor content from jumping around when navigating image widgets and allows drag and dropping content into an empty caption.\r\n*   A number of breaking changes were introduced in the process. Check out the [migration guide to CKEditor 5 v29.0.0](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/builds/guides/migration/migration-to-29.html) to learn more.\r\n*   There were ‚ûï17,193/‚ûñ5,078 changes made in 476 files in the `ckeditor5` repository alone. Nearly all image sub-features have been revamped and improved. The number of tests in the `ckeditor5-image` package doubled since the last editor release.\r\n\r\nThat's it for now but stay tuned. The release of CKEditor 5 v29.0.0 will be announced on the [blog](https://ckeditor.com/blog/) in July."", 'author': 'oleq'}]","['type:feature', 'package:image', 'support:2', 'Epic', 'squad:core']",CLOSED,2052.0,"['8666', '8712']"
ckeditor,ckeditor5,Table cell/row/column selection ‚Äì stage I,"We started to work on the table selection feature. Since it is a bigger task that will be delivered over multiple releases we split the task to the following sub-tickets:

## MVP (Stage I)

- [x] #6154: Allow selection to be set on object elements
- [x] #6113: Validate table selection POC approach
- [x] #6118: Copy selected table fragment (base)
- [x] #6119: Cut / delete on selected table fragment
- [x] #6284: Table selection does not cooporate with typing
- [x] #6301: Multiple cell selection does not get along with enter
- [x] #6150: Align table properties UI to multi-range selection
- [x] #6114: Table mouse selection UI/UX
- [x] #6353: Table MouseSelectionHandler should reset its #isSelecting flag on mouseup
- [x] #6116: Review behavior of existing features on multi-range selections in tables
- [x] #6125: Table selection handling: Insert column, row commands
- [x] #6126: Table selection handling: Remove row, column commands
- [x] #6127: Table selection handling: Set heading rows, column commands
- [x] #6128: Table selection handling: Split cell
- [x] #6151: Test whether all table features are still functional if the table selection does not work
- [ ] #6328: Handle multi-range selection in deleteContent(), insertContent() and modifySelection()
- [x] #6330: Table Shift+Click selection UX
- [x] #6343: Enable table selection as core table feature
- [x] #6346: Selecting a table cell (or cells) through a model does not render a nice table selection
- [x] #6347: It should be possible to make selection of a single cell.
- [x] #6348: Multiple cell selection should not fail when mouse is over a widget

## Stage II

Tracked here: https://github.com/ckeditor/ckeditor5/issues/6285.

## Stage III (optional features)

Tracked here: https://github.com/ckeditor/ckeditor5/issues/6297.

---

Right now, as defined in https://github.com/ckeditor/ckeditor5-table/issues/3 we support only ""a custom table selection"". This means that it's possible to place the selection inside table cells, but you cannot select an entire table cell and, most importantly, more than one cell at a time. Which means that you cannot select rows and columns.

CKEditor 4 implements a custom cell/row/col selection (you check it live e.g. on https://ckeditor.com/ckeditor-4/#document). It works incomparably better than the native selection which in all browsers (without maybe Firefox) is just useless. 

What we need is something very similar to what CKEditor 4 offers. ",Reinmar,[],"[{'body': 'Some POC of fake selection in tables with current post fixers, table model (with block content), etc:\r\n\r\n![peek 2018-08-02 16-05](https://user-images.githubusercontent.com/247363/43589060-318d2fbe-966e-11e8-8ae9-7da5377b9014.gif)\r\n\r\nThe above POC is implemented as custom class wchich tracks selection on table in three different modes:\r\n1. block\r\n2. column\r\n3. row\r\n\r\nI have some UI/UX questions (cc @oleq, @dkonopka) on how we\'re going to implement this.\r\nIn https://github.com/ckeditor/ckeditor5-table/issues/1#issuecomment-392034926 @oleq defined how merge cell option should behave. But do we fancy another modes besides ""block"" mode? I\'ve implemented ""row""/""column"" modes as it was simple addition to the ""block"" mode. Also I\'ve seen this on other text-edtiors (like LibreOffice):\r\n\r\n![peek 2018-08-02 16-24](https://user-images.githubusercontent.com/247363/43590095-86bfb87e-9670-11e8-9a51-f84df2c147b6.gif)\r\n\r\nps.: Side note - right now I don\'t have strong opinion/idea how to translate this fake selection to commands as such selection is not possible in the model due to selection post-fixer. Right now I\'m leaning towards `TableSelection` plugin which might be used by the `TableToolbar` to determine which buttons/options render since with multple cell selection some options may be changed, like:\r\n- Remove row -> Remove rows\r\n- Insert row below -> Insert 3 rows below (ie when 3 rows are already selected)\r\n', 'author': 'jodator'}, {'body': ""The merge cells button should be a simple button that merges selected cells, nothing more.\r\n\r\nAs for the column/block selection feature, I think we can live without it (ATM). Let's talk about it and find out if it makes sense for us in the follow-up issue, OK?"", 'author': 'oleq'}, {'body': 'When would this feature be available for tables? ', 'author': 'deepak-khopade-isdr'}, {'body': 'Do we know when this feature would be available? I have a requirement where users want to paste to part of the table from excel.', 'author': 'harshinim'}, {'body': 'The branches with a preview were updated to `i/3202` in `ckeditor5-table` and `ckeditor5-engine` repos. Old branches (`t/63`) were removed.', 'author': 'jodator'}, {'body': 'Would be nice to have this handled by the inspector: https://github.com/ckeditor/ckeditor5-inspector/issues/68.', 'author': 'jodator'}, {'body': 'Done :) It can be tested in the nightly docs: https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/features/table.html', 'author': 'Reinmar'}]","['type:feature', 'package:table', 'Epic']",CLOSED,3202.0,"['6119', '6114', '6353', '6125', '6150', '6284', '6348', '6301', '6151', '6113', '6128', '6346', '6297', '6328', '6154', '6116', '6343', '6285', '6118', '6127', '6347', '6330', '6126']"
ckeditor,ckeditor5,Implement table captions,"Tables need to be captioned. Most likely, we can implement this just like in the image feature. It'd be also good to extract pieces of shared logic so #1065 is resolved.

Related comments:

*   https://github.com/ckeditor/ckeditor5/issues/610#issuecomment-339661146
*   https://github.com/ckeditor/ckeditor5-table/issues/51#issuecomment-397245583

---

If you'd like this feature implemented, please react with :+1: to this post.",Reinmar,['maxbarnas'],"[{'body': 'I hope this is the right issue to post this. The currently behaviour with adding a figure is from my side more annoying then good:\r\n\r\n```html\r\n<figure class=""table"">\r\n     <table>\r\n         <!-- ... -->\r\n     </table>\r\n</figure>\r\n```\r\n\r\nThe table itself does not need a figure because it is by itself like a figure it has its own `<caption>` tag. So this behaviour should definitly be changed or configureable that the real `<caption>` tag is used and not some wrapping with a figure tag some class name:\r\n\r\n\r\n```html\r\n<table>\r\n     <caption>Test</caption>\r\n\r\n     <!-- ... -->\r\n<table>\r\n```\r\n', 'author': 'alexander-schranz'}, {'body': ""@alexander-schranz, we based on this research: https://ckeditor.github.io/editor-recommendations/features/table.html. If you're still unsure, please open a ticket in https://github.com/ckeditor/editor-recommendations/issues."", 'author': 'Reinmar'}, {'body': 'Any plans to implement?', 'author': 'marcellofuschi'}, {'body': ""I need table captions for a project I'm working on. Shall I try to implement it and send a PR? You aren't working on it right now, are you?"", 'author': 'marcellofuschi'}, {'body': '@Reinmar The standard of the figure and figcaption tag is sure correctly interpreted, but for a table itself a figure and figcaption in html is not needed as the table itself has a caption tag which should be used instead of wrapping the table in a figure and add a caption. Would really be great to get rid of the figure around the table and use the real table caption instead, maybe this can be configurable to avoid bc breaks.', 'author': 'alexander-schranz'}, {'body': '@alexander-schranz, I think the rationale for using `<figure>` is well explained here: https://github.com/ckeditor/ckeditor5/issues/3194#issuecomment-397234125', 'author': 'marcellofuschi'}, {'body': ""@marcellofuschi thats sentence is definitly true for any textuel content, for the table itself it just doesn't make sense as the table itself is like a figure tag and have its own caption. Wrapping it again into a figure and caption should not be done aslong you don't have more then a table tag inside this figure tag. "", 'author': 'alexander-schranz'}, {'body': 'Has there been any further work on this? We are failing accessibility testing because of this.', 'author': 'ktwbc'}, {'body': 'Some notes regarding the scope:\r\n\r\n*   Adding toolbar button (could be moved from the image caption),\r\n*   Adding/removing element to the model + conversion,\r\n    *   note: caption can only be the first element in a table, so we may simplify its conversion and any model rules with that rule in mind,\r\n    *   note: in the upcast conversion we need to support figure>figcaption and table>caption,\r\n    *   note: we want to follow editor recommendations (figure>figcaption); see: [https://html.spec.whatwg.org/multipage/tables.html#the-caption-element](https://html.spec.whatwg.org/multipage/tables.html#the-caption-element)\r\n*   Updating algorithms,\r\n*   \xa0Selection (multi-cell),\r\n*   Copy/cut/paste,\r\n*   Update styles,\r\n*   Documentation', 'author': 'Reinmar'}, {'body': ""> Has there been any further work on this? We are failing accessibility testing because of this.\r\n\r\nWe've just started working on this :+1:"", 'author': 'Reinmar'}, {'body': 'Not sure if this is in scope or not but if captions are being added as part of accessibility then scope=row and those attributes are in that same wheelhouse would be beneficial as well. ', 'author': 'ktwbc'}]","['type:feature', 'package:table', 'support:2', 'Epic', 'domain:v4-compatibility']",CLOSED,3204.0,['610']
ckeditor,ckeditor5,Restricted editing,"## üìù Provide a description of the new feature

This enhancement would allow to run the editor in two _editing modes_:

* standard mode,
* restricted mode.

The feature would allow to mark editor's content part as an editable part (see _Marking as editable part_).

_Editing mode_ can changed at a ~runtime, via an API call.~ by configuring the editor. The modes should be operated by different users so there is no need to switch it in the same editor.

### UC: Marking as editable part

Marking any part as editable should be possible only while in **standard mode** and it should be doable using a button. Below is an example UC:

1. Select a part of paragraph.
2. Click the ""Enable editing"" button.

#### ‚úîÔ∏è Expected result

* Selected part is marked as editable in the restricted mode.
* Selected part gets additional styling indicating that it's editable in the restricted mode, let's make it a yellow background with some subtle outline that would differentiate it from yellow text background.

### UC: Editable part toggling

1. Select a part that **is already editable** in the restricted mode (denoted by yellow highlight).
2. Click the ""Enable editing"" button.

#### ‚úîÔ∏è Expected result

* Selected part is no longer marked as editable in the restricted mode.
* Visual marker is gone.

## üìÉ Other details

I intentionally didn't use _full editing_ mode as it might bring up some historical connotations with our lovely full package üôÇ

---
Restricted editing mode enhancements (part III - follow-up PRs)
- [x] names of plugins, commands, etc
- [x] review approach of enabling commands - maybe better would be using schema - would be better with clipboard - one configuration).

Follow ups:
- placeholders of editable fields https://github.com/ckeditor/ckeditor5/issues/5804
- enable clipboard: https://github.com/ckeditor/ckeditor5/issues/5802

---

If you'd like to see this feature implemented, add a üëç reaction to this post.",Reinmar,"['jodator', 'oleq']","[{'body': '## Icon\r\n\r\nTwo proposals here, I prefer the first one, but it might be confusing for the user because eg. restricted editable won\'t work for blocks of paragraphs.\r\n\r\n![restricted-icon1](https://user-images.githubusercontent.com/10219857/68771291-0f195b80-0628-11ea-8f6c-36e7ad404431.jpg)\r\n![restricted-icon2](https://user-images.githubusercontent.com/10219857/68771292-0f195b80-0628-11ea-8611-05c7021d2074.jpg)\r\n\r\n## Dropdown proposal\r\nDuring the research of restricted editing in the Microsoft Word, I have found a decent improvement of this feature: moving between editables. Maybe it\'s worth to consider it after MVP implementation.\r\n\r\n![restricted-dropdown](https://user-images.githubusercontent.com/10219857/68771507-71725c00-0628-11ea-8ae7-48c2fdcb2821.jpg)\r\n\r\n## Highlight color\r\nWord is using light yellow color for their restricted editables and it could work for us too, but we have comments feature with a comparable color. So I would propose something similar - orangish. In comparison, I\'m adding here a ""blue mockup"" also.\r\n\r\n### Orangish\r\n![restricted-orangish](https://user-images.githubusercontent.com/10219857/68771817-02e1ce00-0629-11ea-9ec5-05aeae3c8f8b.jpg)\r\n\r\n### Bluish\r\n![restricted-blue](https://user-images.githubusercontent.com/10219857/68771840-0f662680-0629-11ea-8073-b4f95f3d3857.jpg)\r\n\r\n## Highlight style\r\n\r\nIt was a kinda tricky thing because I have been there during research on track-changes / comments & user selection features. To sum up, I\'m recommending to mark editable areas similar to the [highlight plugin](https://ckeditor.com/docs/ckeditor5/latest/features/highlight.html#demo) way,  but also Microsoft Word solution ( `[` `]` brackets) might work out too and it looks pretty nice inside editor instance.\r\n\r\n### Bordered highlight (looks buggy)\r\n![restricted-bordered](https://user-images.githubusercontent.com/10219857/68772619-65879980-062a-11ea-851c-dbb3a64f9fac.jpg)\r\n\r\n### Brackets highlight (Word solution)\r\n![restricted-braces](https://user-images.githubusercontent.com/10219857/68772661-733d1f00-062a-11ea-8c23-b066fd97c978.jpg)\r\n\r\n### Brackets solution mockuped on live editor instance:\r\n<img width=""1729"" alt=""Screenshot 2019-11-13 at 12 53 11"" src=""https://user-images.githubusercontent.com/10219857/68772689-805a0e00-062a-11ea-8afe-ec6a791f19e0.png"">\r\n\r\n\r\n', 'author': 'dkonopka'}, {'body': ""To track the progress of the feature I've added a detailed list with things to do in this task - not that the list may change."", 'author': 'jodator'}, {'body': 'After implementing plugins for the ""standard"" mode - in which content creators will mark parts of the content as ""exceptions"" in the ""restricted"" mode - I\'m not sure if we should focus on ""opening"" parts of text rather then ""locking"".\r\n\r\nAs for now, I think that the button shouldn\'t be named ""Restricted Edting"" and maybe it\'s UI should be focused on the ""opening"" (adding exceptions) to the parts of texts.\r\n\r\nIn the draft PR I\'ve renamed this part of the `RestrictedEditing` feature to `RestrictedEditingException` (the name is still open to change of course).', 'author': 'jodator'}, {'body': 'Notes from the call about the UI:\r\n\r\n---\r\n\r\n## Standard mode\r\n\r\n- Which icon?\r\n    - When on normal text: `[unlocked lock]`, ""Enable editing"" title\r\n    - When on exception: `[unlocked lock]` ""Disable editing"" title\r\n    - Should icon show the state or the action of the button?\r\n        - Answer: the icon should reflect what the ""on"" state of that button is.\r\n- Highlight styling\r\n    - color\r\n        - follow MS?\r\n            - collides with our comments\r\n        - orange seems fine\r\n    - start/end markers ‚Äì üëç\r\n        - `[foo]`\r\n        - positioned :after/:before `content:\'[/]\'`\r\n            - slightly unsafe - because it\'s a selectable content\r\n        - positioned :after/:before with some borders to pretend `[/]` characters - should be safer\r\n            - will solve the empty element case - it will always be visible\r\n            - such brackets are not selectable - which is good\r\n\r\n## Restricted mode\r\n\r\n- Dropdown?\r\n    - Easier navigation between editable regions\r\n    - Fine for MVP\r\n    - Should show keyboard shortcuts\r\n    - Future: Balloon with next/prev like in a11ychecker\r\n        - Problem: conflict with link and other balloons\r\n    - Label: ""Previous/next editable region""\r\n    - Icon: as proposed ‚Äì lock next to a text\r\n- How will brackets work here?\r\n    - If we\'ll choose the :after/before + borders, then it\'s completely transparent\r\n- Styling when inside a certain editable region\r\n    - Non-MVP: Opacity for non-editable text?\r\n        - Is it technically possible?\r\n        - It seems so - we should be able to easily wrap all non-editable text and blocks with some spans\r\n    - Hover style\r\n        - When outside: cursor:pointer?\r\n        - When hover: cursor:text?\r\n        - No decisions so far ‚Äì let\'s test it live\r\n    - Selection inside style\r\n        - No decisions so far ‚Äì let\'s test it live\r\n- Conclusion: We\'ll refine those styles when we\'ll be able to see this live.', 'author': 'Reinmar'}]","['type:feature', 'package:restricted-editing', 'Epic']",CLOSED,5683.0,"['5804', '5802']"
ckeditor,ckeditor5,Replacement of the CKEditor 4's styles dropdown feature,"## What? (tl;dr)

CKEditor 4 offered a [configurable styles feature](https://ckeditor.com/docs/ckeditor4/latest/features/styles.html):

![image](https://user-images.githubusercontent.com/156149/68040917-a5b45700-fccf-11e9-9626-5c58ef4336a9.png)

You could define block or inline formatting options. 

In the past, we were discussing a similar feature in https://github.com/ckeditor/ckeditor5/issues/648, but I'd like to keep that older ticket about what innovative we could do about styling in CKEditor 5. This ticket, on the other hand, should be about unblocking people who relied on the Styles feature from CKEditor 4.

---

**Edited: 09.02.2022**

## Glossary

- SD: Styles dropdown (called in CKEditor 4 also ‚ÄúStyles combo‚Äù)
- CKE4: CKEditor 4
- CKE5: CKEditor 5
- SD4: SD in CKE4
- SD5: SD in CKE5

## Rationale

I‚Äôd like to first go through some rationale behind the direction that we took when designing this feature.

We began the project with an extensive product research to understand how‚Äôs the Styles dropdown (SD) feature used in CKEditor 4 and whether that vision can (and should) be translated to CKEditor 5.

Our goal was to:

- Reduce the feature parity gap between CKE4 and CKE5
- While producing a feature that makes sense in CKE5‚Äôs realm

It‚Äôs important to note that SD was first introduced around 2009 and the vision behind it is blurred. This feature is understood slightly differently by everyone and its functionality is also not perfectly framed. It can be configured to completely replace CKE4‚Äôs Format feature but it‚Äôs shipped together with it (and placed next to it in the toolbar) in all the CKE4‚Äôs presets. At the same time, its default configuration (of the available styles) mixes presentational styles with semantic ones.

During the research we found that recreating the same functionality in CKE5 makes little sense as it would neither be possible technically nor make much sense from a product perspective. Additionally, due to an ambiguous nature of CKE4‚Äôs SD, the feature was used in countless and unpredictable scenarios, often running into its own limitations in corner cases.

## Quick recap of CKE4‚Äôs SD

CKE4‚Äôs SD documentation: [https://ckeditor.com/docs/ckeditor4/latest/features/styles.html](https://ckeditor.com/docs/ckeditor4/latest/features/styles.html)

### Modes

It allows configuring 4 groups of styles:

- Block ‚Äì in this mode, the current block element will be **replaced** with the one applied by SD. This allows e.g. turning a paragraph in to a heading (with additional attributes). This behavior allows **replacing the Format** feature in CKE4 (and would conflict with the Heading feature in CKE5).
- Inline ‚Äì in this mode, an inline format is applied to the currently selected text. For instance, a `<span class=marker>` or `<kbd>`.
- Object ‚Äì in this mode, the style is shown in the dropdown contextually and is applicable only to the currently selected element or one of its parents ‚Äì e.g. an image, table cell, table row, table, etc. In this mode, the element itself is enhanced with attributes defined in the style. The element itself will not be otherwise modified (e.g. renamed or removed).
- Widget ‚Äì these styles are a special kind of object styles, applicable only to specific widgets. Interestingly, only this mode support a concept of **style groups** allowing to define **exclusive styles**. This is a late addition to the feature.

What‚Äôs important, the actual mode that the feature will choose is not controllable by the developer but it‚Äôs hardcoded in the feature based on the element name.

This means that it‚Äôs impossible to create a style working in the ‚Äúobject mode‚Äù for paragraphs. If you want to allow marking all heading levels with a certain style, you need to define 6 styles (one per each `h1-6` element) and all of them will be visible in the dropdown. This behavior leads to a [[visual clutter](https://www.drupal.org/project/drupal/issues/3222797#comment-14195291)[](https://ckeditor.com/docs/ckeditor4/latest/examples/standardpreset.html)](https://www.drupal.org/project/drupal/issues/3222797#comment-14195291).

Most likely, due to the block mode it was also impossible to implement a concept of style groups, reducing control over what the user is able to create in the editor and the UX for the user.

### Focus on HTML

The feature‚Äôs configuration is based on HTML. It‚Äôs configured directly via HTML element names and attributes. 

The SD‚Äôs configuration also affects ACF ‚Äì i.e. defining a style makes that element and attributes allowed in the editor.

### Attributes

The feature allows configuring styles that apply any attributes ‚Äì from classes, through any custom attributes to inline styles. That addresses needs of both groups of integrators ‚Äì ones aiming at a semantical content and ones focusing on content presentation. 

### Relation between SD and Formats

The SD and Formats feature cooperate quite well together.

Scenario:

1. Open [https://ckeditor.com/docs/ckeditor4/latest/examples/standardpreset.html](https://ckeditor.com/docs/ckeditor4/latest/examples/standardpreset.html)
2. Place the caret anywhere in the editor.
3. Via SD: Apply ‚ÄúItalic title‚Äù (uses h3 + inline styles).
4. Via Formats: Apply ‚ÄúHeading 1‚Äù.

Now, if Formats would blindly replace `<h3>` with `<h1>` two things could happen:

- Either the inline styles applied by SD would leak to `<h1>`. This doesn‚Äôt happen ‚Äì the styles are removed.
- Or any additional attribute (ones not specified by the SD feature ‚Äì e.g. `data-foo`) might me lost. This doesn‚Äôt happen either.

The cooperation between them is smart and I actually started wondering how was this achieved. How the Formats feature knows which attributes to remove. It‚Äôs probably achieved by coupling both features.

Anyways, this is quite neat and it actually doesn‚Äôt work that well in other editors. It also shows some of the things we need to take into consideration when working on this feature.

### Relation between SD and other inline-style-based features

However, SD does not cooperate with other features that use inline styles that well.

E.g. applying a style via SD which sets `<span style=""font-size: 10px; color: red"">` and then changing the font size via the font size features leaves us with a lone `color: red`. 

Taken the complexity behind handling inline styles, it‚Äôs not a big surprise that it works this way.

## HTML vs CKE5

The biggest challenge in designing this feature for CKE5 is SD4‚Äôs focus on HTML. This aspect makes it very non-native to CKE5 and hard to integrate with existing features.

For instance, the aforementioned scenario of how SD4 works with CKE4‚Äôs font size (it works this way most likely out of the box - without additional integration logic) would require a custom logic integrating SD5 with CKE5‚Äôs font size. Same for headings, table properties, etc.

Thus, we have to carefully design the scope of SD5 to avoid as many traps as possible.

Another design question is related to implementation strategy, but has strong impact on the product ‚Äì what should be SD5‚Äôs relation to GHS?

In CKE5, the only feature tied to HTML is GHS. It‚Äôs also the only feature that maintains any sort of mapping between:

- the model and existing (native) CKE5 features
- and the HTML elements and attributes

Taken strong ties of SD4 to HTML, it seems unavoidable to base SD5 on something native to CKE5. SD5 should be also configurable via HTML element names and attributes, so since GHS is the only map between CKE5 and HTML, we can‚Äôt avoid relying on it.

The question that remains is ‚Äì how much we should rely on it?

- Should it only share the data schema information with GHS?
- Or should it be basically be seen as a UI for GHS (set GHS‚Äôs attributes on the model)?

I‚Äôm for the latter as this seems to better frame what SD5 will be and will benefit both features as they‚Äôll share more logic.

## Strategy for CKE5

SD is a surprisingly complex feature when confronted with CKE5‚Äôs reality. Thus, I propose a conservative approach aimed at reducing the complexity and chaos:

- We are not going to try to make everyone happy. The scope will be as narrow as possible while still bringing a value.
- We are going to develop this feature iteratively. We won‚Äôt try to predict too many steps into the future to avoid decision paralysis.
- We are accepting the fact that early decisions and vision may frame this feature in a direction that will be some sort of a dead end (from the product perspective). We can always have a sibling feature, exploring a different approach (especially taken the vast number of use cases and approaches towards content and integrating the editor).

### Key decisions

- We‚Äôll start with each style defining only: element name + class(es).
    - The purpose here is to avoid the integration hell.
    - If only class(es) are to be added/removed there‚Äôs less clash with other editor features.
    - Also, classes are atomic entities and are boolean values (present or not).
- We‚Äôll start with only the ‚Äúenhance existing element‚Äù mode for block elements.
    - In other words: the ‚ÄúBlock mode‚Äù and ‚ÄúObject mode‚Äù of SD4 will blend into one mode. You will be able to add a class to a heading, but not change a heading into a paragraph.
    - Again, this will limit the integration hell.
    - Moreover, the feature will be contextual and show only the styles applicable in the current selection without changing the structure of the model. This is to reduce the clutter SD4 could create.
- Widget styling is out of the picture for now.
    - There‚Äôs a too deep clash with e.g. image styles and predefined sizes.
- Possible future additions:
    - Style groups. For now, all styles are exclusive.
    - Supporting other attributes than classes.
    - Widget styling of some sort.
    - The SD4‚Äôs ‚ÄúBlock mode‚Äù.
    - Richer UI. For now, plain dropdown, potentially divided into two parts (object, inline). In the future: potentially some sort of a tree of options.

### Stages

- Stage 1: Allow applying class to an existing element.
- Stage 2: Allow applying inline formatting (defined as element+classes).
- Stage 3: ??? (based on the feedback and feasibility).

## Specification

- The feature will be named `Style`.
    - Note: we have `Heading` (singular) already and (unless someone can think of a more fitting name) `Style` would be the way to go as it follows this convention.
- The feature will register a `'style'` dropdown.
- The dropdown will display a contextual list of currently applicable styles.
    - A style is applicable when it can be applied to the element existing in the path starting from the selection position to the root.
    - For instance: when a selection is in a table cell, elements that need to be checked are: `<p>`, `<td>`,  `<tr>`, `<table>`, `<figure>`. We may omit some risky elements like `<thead>` or even `<figure>` (they didn‚Äôt work in SD4 anyway).
    - The styles  should be listed from closest (`<p>`) to furthest (`<figure>`).
- The feature will be configurable via `config.style.items` being an array of `{ title, element, classes }`.
    - In the future we can freely add other attributes: `styles`, `attributes` in the same way we define them in GHS, ElementDefinition and MatcherPattern.
    - The tricky bit is the `element` property as GHS, ElementDefinition and MatcherPattern use `name`. Unfortunately, going with `name` in this case would be odd.
        - Perhaps an option to consider is wrapping the element name and its attributes in another object like: `{ title: 'Some style', element: { name: 'p', classes: 'foo' } }`.
        - Maybe a more fitting name for `element` would be `markup` or `view`. The latter is used e.g. in `Heading`'s config but would be weird here.
        - **TODO:** Decision needed.
    - **TODO:** If we‚Äôll decide to merge SD into `ckeditor5-html-support` the name of the config property should start with `config.htmlSupport`.
    - **TODO:** `items` sounds like a product of something (something generated based on a certain definition). `definitions` would sound better.
        - OTOH, we‚Äôve got `config.heading.items` already
        - ... and `config.image.styles.options` :D
- The feature will support two modes.
    - ‚ÄúElement mode‚Äù: That‚Äôs the ‚Äúapply class to an element‚Äù mode, so the equivalent of SD4‚Äôs object mode. The difference in SD5 will be that this mode will be applicable to all elements but inline ones.
    - ‚ÄúInline mode‚Äù: The equivalent of SD4‚Äôs inline mode, so a mode allowing applying a text formatting.
- The decision regarding element and inline modes will be based for now on the element name.
    - The goal is to not leak the mode names to the configuration, so we have more freedom in the future to change how we see them.
    - At some point (i.e. when we‚Äôd work on support for the block mode, some flag will need to be set for each of the styles).
    - We will be able to use data schema from GHS to understand whether element `<x>` is block or inline.
- Reuse of GHS
    - We will try first to make SD5 a ‚ÄúUI for GHS‚Äù meaning that it will be applying in the model GHS‚Äôs attributes.
    - However, if we‚Äôll stumble upon issues with this approach (e.g. downcast conversion to the editing view), we can change the approach and only share the schema information with GHS.
    - **TODO:** So, this is the biggest bit to be researched.
    - If we‚Äôll go with full GHS reuse, the SD5 feature should enable support for styles defined in `config.style.items` in GHS (so the user doesn‚Äôt have to configure GHS in addition to configure SD).
        - This will also make GHS invisible to people focusing solely on enabling SD in their editors.
- Only one of the styles for element `<x>` can be applied at the same time.
    - This is ‚Äì when there are two styles ‚ÄúX fancy‚Äù and ‚ÄúX boring‚Äù defined, only the former or latter can be applied.
    - The currently applied styled should be marked in the dropdown as active.
- Behavior of the UI.
    - Clicking the currently active style should remove it from the element.
    - Clicking another style for the current element should remove the one that was active and apply the new one.
    - Should we present the currently applied style in the label of the dropdown?
        - Heading does so.
        - SD4 too.
        - But the feature actually may have multiple styles active at once (one for `<p>`, one for `<td>` and so on). Which one to show? The closest one?
        - **TODO:** Decision needed.
    - When none of the styles is applicable in the current context, the dropdown should be disabled.
    - Clicking a style in the dropdown panel should close the panel.
        - For now, it will be a rare case that the user wants to select multiple styles in one place.
        - In the future, once we have non-exclusive styles, we may need to revisit this.
    - We should consider using `max-height` to make the dropdown panel scrollable:
        - We could bring back this: https://github.com/ckeditor/ckeditor5/issues/3416
        - With the assumption that there will be no tooltips used in this panel.
    - We should try displaying previews of the defined styles in the styles dropdown panel
        - To do that, we can use the `.ck-content`
        - The button would look like: `<div class=""ck-content""><h3 class=""my-style"">My style</h3></div>`
        - Additionally, we need to normalize some risky styles for that preview, possibly by defining inline styles (on the `<h3>`): `margin: 0; padding: 0; ...?`
- Other questions.
    - Perhaps this feature should land in `ckeditor5-html-support`?
        - Taken its close ties to GHS and the ‚ÄúHTML world‚Äù this may be the best place for it. No code-sharing issues and soft requirements between features.
        - However, product-wise, this feature definitely deserves to be presented as an unrelated one. Especially that we don‚Äôt know what‚Äôs down the road.
        -

---

If you'd like to see this feature implemented, add a üëç reaction to this post.
",Reinmar,[],"[{'body': ""One thing to consider: People use our current heading dropdown to add more formats. We could go both ways:\r\n\r\n* rename the heading feature\r\n* add new feature, that'd be not be used in conjunction with headings\r\n\r\nWhat doesn't seem to have any sense is a feature like in CKE4 where you'd have both dropdowns at the same time (in one editor)."", 'author': 'Reinmar'}, {'body': ""Hello,\r\n\r\nI am trying to provide such feature extending the Heading feature. I am trying to  keep it compatible heading configuration, so users could switch plugins without problems, and then, customize it.\r\nWhat I did so far:\r\n\r\nadded to properties to the root of the heading option config:\r\n```js\r\n// allows to apply semantically some attributes to the node, so the user sees\r\n//  it reflected in the toolbar and have the option to tweak the style.\r\n// every property needs a plugin mapping to it, otherwise, it is lost \r\nmodelAttributes: {\r\n        //apply these properties to block level\r\n\tblock: {\r\n\t\talignment: 'justify',\r\n\t\tblockIndent: '5cm',\r\n                // property provided with a custom plugin\r\n                recuo: 3cm\r\n\t},\r\n        // properties of text level\r\n\ttext: { bold : true}\r\n},\r\n\r\n// if true, the style is copied over when user presses ENTER\r\n// it creates a new node of the same type on ENTER\r\ncontinueStyleOnEnter: true\r\n```\r\nThe modelAttributes allows to config block styles, inline styles, or even a mix with the two types. This is handled by the HeadingCommand (code below).\r\nWith this, you could define some properties editable by the user (using modelAttributes), and some properties not (using the view object in the configuration). I do not control if a configuration has both view and modelAttributes pointing the same property. \r\n \r\nI tried to put modelAttributes to the model propety, but it requires a lot of changes on the plugin and the [`elementToElement()`](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingediting.js#L73) did not worked, as it expects model to be a string (maybe this could be changed? I do not know enough)\r\n\r\nIn [headingediting](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingediting.js), I changed the [`isHeading` check](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingediting.js#L98)  in the [afterInit method](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingediting.js#L88-L105) to include the new `continueStyleOnEnter` property:\r\n```js\r\nconst isHeading = options.some( option => positionParent.is( option.model ) \r\n                                       && !option.continueStyleOnEnter );\r\n```\r\n\r\nin [HeadingCommand](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingcommand.js), I had changed the [execute method](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/src/headingcommand.js#L66-L84), to apply the `modelAttributes` into the model.\r\n\r\n```js\r\nexecute( options ) {\r\n\tconst model = this.editor.model;\r\n\tconst document = model.document;\r\n\tconst modelElement = options.value;\r\n\r\n\tmodel.change( writer => {\r\n\tconst selection = document.selection;\r\n\tconst blocks = Array.from( selection.getSelectedBlocks() )\r\n\t\t.filter( block => {\r\n\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\r\n\t\t} );\r\n\r\n\tconst configOptions = editor.config.get( 'heading.options' );\r\n\tconst modelOption = configOptions.find( option => option.model === modelElement);\r\n\r\n\tfor ( const block of blocks ) {\r\n\t\tif ( !block.is( modelElement ) ) {\r\n       \t       //clear the old attributes to apply the new styles \r\n       \t\twriter.clearAttributes(block)\r\n\t\t\twriter.rename( block, modelElement );\r\n\t\t\tconst attributes = modelOption.modelAttributes;\r\n\t\t\tif (attributes) {\r\n\t\t\t\twriter.setAttributes(attributes.block , block );\r\n\t\t\t\tconst children = Array.from(block.getChildren());\r\n\t\t\t\tfor (const child of children) {\r\n       \t                        //clear the old attributes to apply the ones in the new style\r\n       \t                        writer.clearAttributes(child);\r\n\t\t\t\t\twriter.setAttributes( attributes.text , child );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t} );\r\n}\r\n```\r\n\r\nI clear the attributes of each node before apply the ones defined in the configuration. I looked in Google docs and it works the same way when you select a style/heading.\r\n \r\nI still did not think in external configuration, but this could be a fetch to a URL the user defines in configuration (I understood it works this way in ckeditor4).\r\n\r\nIs this a good way to do it?\r\n\r\nI am still learning about the ckeditor world, but I have deadlines and features to deliver to my users, so with the time I have, I am trying my best to make something not too weird that coudl, maybe, help other users of the editor.\r\n\r\nPS.: If you guys do no want the result of this work in the ckeditor repo, could I release the result as a separate plugin? I ask, because, as of now, 98% of the code is the heading plugin (which I would make it very clear, of course).\r\n\r\nThanks in advance for your kind attention and congrats on this great product."", 'author': 'antoniolucasnobar'}, {'body': ""Hi and thank you for your discussion!\r\n\r\nI think the style dropdown is very important, especially if you'd like to only allow preconfigured styles (via classes). In CMS that's typically the case as you don't want end-users to set inline styles with font-size, font-color etc. as they will destroy the design.\r\n\r\nAnyway, they should be able to for example change the style of a list or a heading or ... by selecting a style.\r\n\r\nThe CKEditor 4 solution was sub-optimal in some points:\r\n1. it combined elements with classes. Selecting a style changed the dom element, which isn't always desirable (instead it would be better to only allow certain styles for certain elements defined + wildcards)\r\n2. The UX wasn't good. It should allow combining multiple classes / styles if they are compatble (based on the filter rules mentioned above) and show a checkbox for the applied styles (based on classes). Furthermore it should allow to group the styles.\r\n\r\nI know this is not a simple task, but I think that would be important to discuss.\r\n\r\nSo in short:\r\n- Define applicable classes by a css selector for each style\r\n- Allow to set / remove multiple classes by one style\r\n- Do no more change the HTML element of the selected text when applying a style\r\n- Allow to combine multiple styles on the same element and indicate that by checkboxes in the styles widget\r\n- Allow grouping styles in the widget"", 'author': 'JPustkuchen'}, {'body': 'Some more thoughts: Just as @JPustkuchen mentioned, we require this feature in a CMS, which in its data layer allows setting classes on most elements (similar to HTML).\r\n\r\nHaving this, we especially need the suggested matching algorithm. Thus, if you are in a paragraph in a table cell, it should be possible adding a class to the table cell or even table.\r\n\r\nObviously, this clashes with the table plugin: It also provides styling options for cells and table (missing rows there?) which are directly applied as `style` attribute.\r\n\r\nAnd it clashes with the text-alignment feature. You may already re-map this to using classNames (which we require).\r\n\r\nFor now, for example text-alignment feature works nicely with headings feature, when they both apply classes in view.', 'author': 'mmichaelis'}, {'body': 'Need this feature, just applying span with class or inline style could be great ! I think this is really different from the ""heading feature"".', 'author': 'Kwaadpepper'}, {'body': 'FYI: the Drupal issue that is blocked on this: https://www.drupal.org/project/drupal/issues/3222797', 'author': 'wimleers'}, {'body': 'FYI: I posted a plan for this feature in the original post of this thread: https://github.com/ckeditor/ckeditor5/issues/5700#issue-516228316', 'author': 'Reinmar'}, {'body': 'Plus one for the plan, sounds great, very thorough üëè ', 'author': 'larowlan'}, {'body': '> Only one of the styles for element <x> can be applied at the same time.\r\n\r\nIsn‚Äôt that a change from CKEditor 4? If it is, is there a particular reason for introducing that as a new restriction?', 'author': 'lauriii'}, {'body': '@lauriii \r\n\r\n> Isn‚Äôt that a change from CKEditor 4? If it is, is there a particular reason for introducing that as a new restriction?\r\n\r\nI don\'t think that\'s an _actual_ change. Even in `\\Drupal\\ckeditor\\Plugin\\CKEditorPlugin\\StylesCombo::settingsForm()` for CKEditor 4\'s `StylesCombo`, we had the following form item description:\r\n\r\n```\r\nA list of classes that will be provided in the ""Styles"" dropdown. Enter one or more classes on each line in the format: element.classA.classB|Label. Example: h1.title|Title. Advanced example: h1.fancy.title|Fancy title.<br />These styles should be available in your theme\\\'s CSS file.\r\n```\r\nWhich means that a single style can have _multiple_ classes assigned. I didn\'t even realize you would be able to apply (and hence _accumulate) multiple styles. I just confirmed that this indeed works in CKEditor 4 by going to https://ckeditor.com/docs/ckeditor4/latest/examples/styles.html.\r\n**But, this was not possible in Drupal\'s CKEditor 4 integration anyway** because it only allowed specifying a tag plus >=1 classes. `StylesCombo` apparently allowed ""accumulating"" styles if they affected different attributes/wrapped existing inline content in additional tags.\r\n\r\n---\r\n\r\n@Reinmar \r\n\r\n> Or should it be basically be seen as a UI for GHS (set GHS‚Äôs attributes on the model)?\r\n\r\nBy this, I think you mean an alternative UI to the `SourceEditing` UI: more limited yet easier to use. Is that a correct interpretation? If so: üëè, makes perfect sense!\r\n‚Üí The ""Reuse of GHS"" section later in your plan confirms this üëç \r\n\r\n> Widget styling is out of the picture for now.\r\n\r\nThis was also not supported in CKEditor 4, and the key widgets are _still_ images and media (in Drupal at least). So: no regression concern. üëç \r\n\r\n>  If we‚Äôll decide to merge SD into `ckeditor5-html-support` [‚Ä¶]\r\n\r\nFrom my POV, SD seems like an optional additional plugin that _depends on_ `ckeditor5-html-support`. But I guess the latter is just a _package_, and not a _plugin_, so it\'s fine? We\'d get `htmlSupport.Style` in addition to `htmlSupport.GeneralHtmlSupport`, and `Style` would depend on `GeneralHtmlSupport` I think? üòä \r\n\r\n> `items` sounds like a [‚Ä¶] `definitions` would sound better [‚Ä¶] OTOH `config.heading.items` [‚Ä¶] OTOH `config.image.styles.options` [‚Ä¶]\r\n\r\nHeh ‚Ä¶ naming is hard! ü§ì üòÑ  But fortunately this is a trivial one to fix. You can make all consistent and just add a BC layer to continue reading the old inconsistently named configuration.\r\n\r\nI agree `definitions` is best, but honestly ‚Ä¶ no strong feelings about this üòÖ \r\n\r\n> But the feature actually may have multiple styles active at once (one for `<p>`, one for `<td>` and so on). Which one to show? The closest one?\r\n\r\nI think the dropdown in unopened state should then show a special `Multiple styles` label. Upon opening it, you\'ll see the active styles highlighted. (I\'ve seen this in many places, but don\'t recall where üôà )\r\n\r\n> We should try displaying previews of the defined styles in the styles dropdown panel\r\n\r\nThis is IMHO a nice-to-have ‚Äî could be a follow-up.\r\n\r\n---\r\n\r\nThis looks like a super solid plan! üëè  Can\'t wait to try it ü§ì üòÑ ', 'author': 'wimleers'}, {'body': '> Only one of the styles for element can be applied at the same time.\r\nIs a problematic limitation. From the implementation side, I absolutely understand why supporting multiple styles simultaneously is a problem, especially if the administrator defining the styles doesn\'t think about it carefully.\r\n\r\nSadly, from the user (end-user and site owner) perspective, it\'s a huge limitation as you often need to combine styles (by classes) and it\'s crazy to multiply them to get all combinations for exclusive selection. That was one of my points in this comment: https://github.com/ckeditor/ckeditor5/issues/5700#issuecomment-912650707\r\n\r\nSo from daily project use, while I think everything else is really a GREAT plan, I think that limitation should really be reconsidered, as I frequently see users trying to combine for example a font layout variant (by class, e.g. ""large text"") with a text style (by class, e.g. ""highlighted"").\r\n\r\nThe funny part is, that it seems to separate into exclusive categories that were former set by inline styles like\r\n- font size\r\n- font-color\r\n- background-color\r\n- ...\r\n\r\nThinking even more about this, I think the nature of this is to be able to combine **text layout** with **text style**.\r\n\r\nThat lead me to the idea, that from the user and UX perspective it might be well understandable and a good choice that styles are exclusive (at least as long as they are not declared to be compatible which might be a later addition).\r\nBut for the combination of **text layout** and **text style** we could find a clever solution I\'ll propose in the following:\r\n\r\n**Problem:**\r\nText writers need _defined_ flexibility in setting texts in different layouts (font sizes & font faces) and styles (color, background-color, border, ...). In early days, WYISWYG editors provided separate selections for this (font size, font face, font color, background-color, ...) which were unique and thereby combinable.\r\nToday we typically don\'t want to give text editors that much freedom and no inline styles, to provide a better UX and consistent (CI / CD) text styles. Therefor it became best practice to use classes instead.\r\n\r\nHTML / CSS combine layout and style in CSS language, defined in classes. In HTML it\'s an antipattern to use inline styles (e.g. font-size, color, background-color, ...), that can be combined as each attribute itsself is unique (no 2x font size at the same element). At class level, these details are abstracted away and we can\'t detect that easy anymore, which properties were used and are combinable.\r\n\r\nIn webdesign we separate between layout (greyboxing) which defines general properties and positions of an element, but without style (screendesign). Layout and style _combined_ provide the full picture.\r\n\r\nHTML only partially solves this separation semantically (only fully by web components). A large part is left to CSS, where things get mixed up, at least in WYSIWYG.\r\n\r\n**Proposed solution:**\r\nSeparation between layout and style could be reintroduced. To prevent us from the requirement of combining styles that should not be combined in styles multiselect and still allow to combine layout and style selection for the users.\r\n\r\nThe missing piece could be to allow to define sublayouts in the \'ck-heading-dropdown\':\r\n![grafik](https://user-images.githubusercontent.com/637807/154011459-4cc994b1-ef53-4e49-89e2-d97eb0adb6e2.png)\r\n_(sorry this screenshot is missing the styles dropdown, of course that would also exist for the style selection!)_\r\n\r\nAllowing an exclusive optional choice of paragraph types, like ""large paragraph"", ""abstract"", ""subline"", which only defines the layout, not the style, could still be combined with a style from the style select. Both by exclusive classes. Of course the person defining the layouts vs. styles has to know his tool...\r\n\r\nIn my eyes and for our typical use-cases that would solve several problems we\'re having with the exclusive style selection in dropdown suggested.\r\n\r\nSolvable combinations for example:\r\n- Boxed layout (background or border) with highlighted style\r\n- Teaser layout paragraph with no style\r\n- Heading sublayout with different font family\r\n- ...\r\n\r\nTechnically, these sublayouts would also just set / remove a class. We\'de introduce a separation option on that level, which already exists on HTML element type, for example selecting a paragraph vs. a quote. But now it allows to separate paragraphs layouts.\r\n\r\nJust one idea... perhaps there are even better ones? What do you think?', 'author': 'JPustkuchen'}, {'body': 'I think this is definitely a step in the right direction, but I have to agree that limiting end-users to selecting a single style per element is not ideal and can lead to huge UI clutter, and a poor UX for design system implementors / users.\r\n\r\nImagine a design system that separates heading sizes, colors, and other attributes into distinct well defined classes.\r\n\r\nPseudo-design-system:\r\n```\r\n/* color modifiers */\r\n.heading--red {\r\n  color: red;\r\n}\r\n.heading--blue {\r\n  color: blue;\r\n}\r\n\r\n/* size modifiers */\r\n.heading--large {\r\n  font-size: 2rem;\r\n  line-height: 2.8;\r\n}\r\n.heading--small {\r\n  font-size: 1.5rem;\r\n  line-height: 2.4;\r\n}\r\n\r\n/* flushness modifier (to correct for line-height rounding) */\r\n.heading--flush {\r\n  margin-top: -0.15rem;\r\n}\r\n```\r\nOne would normally expect to mix and match these classes as the situation dictates:\r\n\r\n```\r\n<!-- A small, red, flush heading, semantically level 2 -->\r\n<h2 class=""heading heading--small heading--red heading--flush"">I\'m small, red, and flush!</h2>\r\n\r\n<!-- A large, blue heading, semantically level 3 -->\r\n<h3 class=""heading heading--large heading--blue"">I\'m large and blue!</h3>\r\n```\r\n\r\nBy not being able to mix and match classing, we\'d be left with 8+ style dropdown options to accomplish just these three simple modifiers.  In a real-world design system, the actual UX would be exponentially worse.\r\n\r\nPlease forgive my crude depiction, but this would make for an ideal user experience in my opinion:\r\n\r\n![image](https://user-images.githubusercontent.com/3664814/154605643-57b74c69-4e74-44f2-9711-a783d2426393.png)\r\n\r\n...with a potential _user defined_ configuration:\r\n\r\n```\r\n{\r\n  elements: [\'h2\', \'h3\', \'h4\', \'h5\'],   // <-- Apply to all of these elements\r\n  styles: {\r\n    \'Flush?\': {\r\n      options: {\r\n        \'heading--flush\': \'Flush\',\r\n      }\r\n    },\r\n    \'Size\': {\r\n      options: {\r\n        \'heading--xl\': \'Extra large\',\r\n        \'heading--l\': \'Large\',\r\n        \'heading--m\': \'Medium\',\r\n      }\r\n    }\r\n    \'Color\': {\r\n      options: {\r\n        \'heading--blue\': \'Blue\',\r\n        \'heading--red\': \'Red\'\r\n      }\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nAny configured styles would ideally be merged together on a per-element basis so that each element has a full knowledge of which configurable options are available for it.\r\n \r\nThanks for your consideration!', 'author': 'LukeLeber'}, {'body': 'The eagle has landed :partying\\_face: \r\n\r\nThe very first, very MVP version of styles dropdown was just merged to master and will most likely be a part of the upcoming release.\r\n\r\nDuring the implementation phase, we\'ve run into lovely complexity on how to make this feature cooperate with GHS. That stopped us for a while and burned time that we hoped to spend on functionality of this feature. Therefore, it\'s a real MVP and we\'ll have to keep working it. In other words ‚Äì no fancy stuff so far ;)\r\n\r\nFor the coming 1-2 releases the feature will be on an ""experimental"" level. It has no documentation yet and might require going through e.g. our [manual test](https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-style/tests/manual/styledropdown.js) to figure out how to configure it. It should be relatively stable too, although, we learned that there are many edge cases in the editing part of it.\r\n\r\nFor the time being, a teaser:\r\n\r\n![](https://user-images.githubusercontent.com/156149/161850925-65f534e5-1493-4a55-bceb-05e03d7c10c7.png)\r\n\r\nThank you @dawidurbanski @oleq @niegowski for pushing hard on the last stretch :clap: :superhero:', 'author': 'Reinmar'}, {'body': 'ü§©', 'author': 'larowlan'}, {'body': ""It almost has documentation. What is lacking, is the configuration section and proper demo content (and defining styles in the demo editor, which I can't do right now without the configuration section :D )"", 'author': 'godai78'}, {'body': 'That looks really, really awesome! Are those styles combinable (""multiselect"") like discussed above? And if they are combinable, what exactly, one block and one text style or unlimited for both?', 'author': 'thomasfrobieter'}, {'body': '@thomasfrobieter They are combinable without any limitations. You can even apply multiple ""block"" styles to a block element (like heading), and on top of that you can apply multiple ""text"" styles into any text inside this heading as well.\r\n\r\nThe only big limitation for now is that we don\'t support applying styles to widgets (like tables).', 'author': 'dawidurbanski'}, {'body': ""> The only big limitation for now is that we don't support applying styles to widgets (like tables).\r\n\r\nDoes this mean images are also not supported yet?"", 'author': 'wimleers'}, {'body': ""But ‚Ä¶ most importantly ‚Ä¶ echo'ing @larowlan 's response:\r\n\r\nü§© "", 'author': 'wimleers'}, {'body': 'Is\'t possible somehow to include it to JS file in build/ckeditor.js from ""Online Builder""?', 'author': 'um505'}, {'body': 'So, these styles are customizable by user?', 'author': 'NavnathKumbhar'}, {'body': ""@um505 - we're working on it.  \r\n@NavnathKumbhar - yes, but by an integrator, on the level of setting up."", 'author': 'godai78'}, {'body': '> @NavnathKumbhar - yes, but by an integrator, on the level of setting up.\r\n\r\nOK, Thank you.\r\nBut what do you mean by ""on the level of setting up""? \r\nCan end-user (our customer) add their custom styles?\r\n\r\nOur customer would like to edit the text with some custom styles, for example:\r\n‚Ä¢\tText Style1 ‚Äì (Font Size: 12, Font-Family: Arial, Font-Color: Yellow)\r\n‚Ä¢\tText Style2 ‚Äì (Font Size: 10, Font-Family: Sans Serif, Font-Color: Black, Background Color: Yellow )\r\n‚Ä¢\tEtc‚Ä¶\r\n\r\nIs this possible with this new UI? Will these custom styles be appear in the list?\r\n\r\n', 'author': 'NavnathKumbhar'}, {'body': ""What I mean is that the client can, but it is done during CKEditor 5 setup. You set up style definitions in the config for CKE5, and then the corresponding CSS definitions per document.  \r\n  \r\nYou can't define styles on the fly during writing.  \r\n  \r\nThere is a styles dropdown guide in the works waiting to be merged which will be released soon as the development team greenlights the feature as fully stable. Not sure when that will happen, though."", 'author': 'godai78'}, {'body': ""> What I mean is that the client can, but it is done during CKEditor 5 setup. You set up style definitions in the config for CKE5, and then the corresponding CSS definitions per document.\r\n> \r\n> You can't define styles on the fly during writing.\r\n> \r\n> There is a styles dropdown guide in the works waiting to be merged which will be released soon as the development team greenlights the feature as fully stable. Not sure when that will happen, though.\r\n\r\nI would like clarification as I am still not clear. Will there be a url like the current styleSet config element in CKEditor 4? This has always allowed us to dynamically add CSS classes by generating dynamic content for our CMS. \r\n\r\nCurrently, we cannot upgrade to CKEditor 5 because this is missing. If it is not going to be brought into version 5 we will have to look into another editor (which we do not want to do!).\r\n\r\n"", 'author': 'gregherrell'}, {'body': 'We have a newly released guide about the Styles feature, that may shed some light on this case: [https://ckeditor.com/docs/ckeditor5/latest/features/style.html](https://ckeditor.com/docs/ckeditor5/latest/features/style.html)  \r\n  \r\nThe feature itself is stable after the recent release (35.0.1) and should work as intended. It is also compatible with collaboration features far as I can tell - in most configurations.', 'author': 'godai78'}, {'body': ""Is there any advice on how to use this dropdown with the tables plugin? I can't seem to make the styles in the dropdown enabled when on a table"", 'author': 'larowlan'}, {'body': ""I'm afraid I don't know this. However, the styles seem to be working inside tables. Some of the styles in the demo in the guide are block styles, that can only be applied to elements such as headers, horizontal lines etc. and hence they may not be available for table contents.\r\n\r\n![2022-08-11 06 47 51](https://user-images.githubusercontent.com/68123541/184068175-69a020de-93bb-4758-982d-cbdcb5703f2d.gif)"", 'author': 'godai78'}, {'body': ""Yep that seems to be what I found too, it works inside tables, but can't be used to apply a style to the whole table.\r\nThanks for the quick reply!"", 'author': 'larowlan'}, {'body': ""I am not sure if its a Drupal or a CKeditor limitation, in CKE5, is it still required to define the **element** + class(es)?\r\n\r\nSo theres currently no way to define a style for all block elements or all inline elements (or simply all elements)?\r\n\r\nSorry, I've read the issue, but this is still not 100% clear to me.."", 'author': 'thomasfrobieter'}, {'body': ""Hey @thomasfrobieter!\r\n\r\n> So theres currently no way to define a style for all block elements or all inline elements (or simply all elements)?\r\n\r\nThat's correct, the styles dropdown currently doesn't support all elements but it is something we plan to work on and enhance in the near future. Feel free to observe #11574."", 'author': 'Witoso'}]","['type:feature', 'support:2', 'Epic', 'squad:core', 'domain:v4-compatibility', 'status:in-progress']",CLOSED,5700.0,"['3416', '648']"
ckeditor,ckeditor5,Table cell/row/column selection ‚Äì stage II,"This is a followup for the table selection MVP ticket (#3202).

In this iteration following improvements will be implemented:

*   [Improved keyboard handling (up and down arrows, tab handling)](https://github.com/ckeditor/ckeditor5/issues/3267)
*   [Introduced select entire row and select entire column features](https://github.com/ckeditor/ckeditor5/issues/6500)
*   [Improved merge and split command handling](https://github.com/ckeditor/ckeditor5/issues/6123)
*   [Improved removing rows/columng from tables with colspan/rowspan multi-cell selections](https://github.com/ckeditor/ckeditor5/issues/6406)
*   [Table properties balloon should be positioned in relation to the selection rather than the entire table](https://github.com/ckeditor/ckeditor5/issues/6357)
*   [Fixed a case where it was possible to merge regular cell with a header cell](https://github.com/ckeditor/ckeditor5/issues/6521)
*   [Fixed a crash when undoing row insertion with cell properties applied](https://github.com/ckeditor/ckeditor5/issues/6382)
*   [Fixed a crash when removing a row after horizontal split](https://github.com/ckeditor/ckeditor5/issues/6401)",jodator,[],"[{'body': 'Hi, is the cell/row/column selection working in collaboration ?\r\nI thought it was planned on this stage.', 'author': 'QuentinLeGoff'}, {'body': 'No, not yet. Still in the pipeline for Q2.', 'author': 'Reinmar'}]","['package:table', 'Epic']",CLOSED,6285.0,"['6123', '6382', '3267', '6357', '6521', '6500', '6401', '6406']"
ckeditor,ckeditor5,Table cell/row/column selection ‚Äì stage III (optional features),"This is a followup for the table selection optional features (after stage II: #6285).

- [x] #6120: Pasting table into a selected table fragment (bigger than one cell)
    - [x] #6769: Handle case of a smaller table pasted into bigger selection
- [x] #6121: Pasting table when only one table cell is selected
- [x] #6122: Handling spanned cell in pasting scenarios
- [x] #6115: Table selection with keyboard
- [x] #6453: Multiselection breaks in tables while holding Shift key
- [x] #6446: The live preview of the table cell background should work with multiple-cell selection
- [x] #6631: The arrow next to the ""merge cells"" button seems to be disabled
",jodator,[],[],"['type:feature', 'package:table', 'Epic']",CLOSED,6297.0,"['6446', '6115', '6453', '6769', '6120', '6122', '6631', '6121']"
ckeditor,ckeditor5,Migration to monorepo,"We've been using multirepo for quite some time now, but as the time goes by we see that it is being less and less productive for our use case.

*   Working with the code will be simpler (now we use home made `mrgit` tool to do that comfortably)
*   Release tools are much more complicated with multirepo, more synchronization needed.
*   Many times it requires additional software (e.g. TravisCI - making PRs in multiple packages to fix one issue requires you to checkout this PR related branch for every dependency, otherwise it fails the tests)

There are multiple things to be handled in this project (along with the priority):

*   [x] [Merge CKEditor 5 subrepositories to the main repository (p1)](https://github.com/ckeditor/ckeditor5/issues/6476)
*   [x] [Update CI (p2,p3?)](https://github.com/ckeditor/ckeditor5/issues/6477)
*   [x] [Code coverage (p3)](https://github.com/ckeditor/ckeditor5/issues/6478)
*   [x] Adjust dev tools
    *   [x] [Testing (p1)](https://github.com/ckeditor/ckeditor5-dev/issues/605)
*   [x] [Online builder - we need to make sure works well (p2)](https://github.com/ckeditor/ckeditor5/issues/6480)

### Stage 2

*    [x] [Deploy changes to the CKEditor 5 repository](https://github.com/ckeditor/ckeditor5/issues/6534)

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Reinmar,[],"[{'body': 'Added the [`monorepo-mock`](https://github.com/ckeditor/ckeditor5/tree/monorepo-mock) branch, that has the file layout that we should be looking for, we can use it for further testing.', 'author': 'mlewand'}, {'body': ""All right we migrated repositories:\r\n\r\n![](https://user-images.githubusercontent.com/5353898/80840006-aa18e880-8bfc-11ea-9d5a-50a7702a1762.png)\r\n\r\nThere's still some documentation to be updated - this will be handled at the beginning on of upcoming week."", 'author': 'mlewand'}, {'body': 'Moved followups to stage II #6746.', 'author': 'mlewand'}, {'body': ""I'm so glad you changed your mind on this (https://github.com/ckeditor/ckeditor5/issues/6014). I have had to search so much to find things. "", 'author': 'robclancy'}]","['type:improvement', 'Epic']",CLOSED,6466.0,"['6477', '6478', '6534', '6480', '6476']"
ckeditor,ckeditor5,"Conversion: Re-converting the entire ""thing"" when it changes","## Background

How does conversion work right now? Whenever a thing changes in the model, we buffer those changes with the differ to get a minimal set of them and then convert those by saying **how the view should change**.

This makes converters extremely complex in cases where the model and view structures diverge (take lists, todo lists or [tables](https://github.com/ckeditor/ckeditor5/issues/6506)). In fact, even in close to 1:1 cases like the image feature there's awful lot of complexity in them and very little flexibility.

We have an ongoing discussion whether the model and view structure should diverge in the first place. If they'd be identical, converters would be quite clear. However, then a lot of it would end up in commands and, from my experience, leak to other features too.

My experience from CKEditor 4 times is that a list feature itself adds tremendous amount of problems to other algorithms such as backspacing, the enter key, inserting new content, etc. You want to insert your image in the middle of a list so the list is split? Good luck! And I'm not joking ‚Äì we've been regularly seeing issues with handling lists by backspace/enter in CKEditor 4 after 6 years since that code was written. That does not happen in CKEditor 5.

In CKEditor 5 we managed to keep nearly all the complexity in a single place which is the list converters. And when tested, we don't get back to that. It's there, it works, we can forget about it. I don't think that any other feature does anything special about lists. This is a huge win. Complexity is kept under the hood of this feature and we maintain nicely decoupled solution.

Of course, there are drawbacks too. For instance, `<ol/ul>` attributes are a problem because these elements do not exist in the model.

## Proposed direction

Quoting [myself:](https://github.com/ckeditor/ckeditor5/issues/6506#issuecomment-604990980)

> I always wanted to make the conversion base on as simple mechanism as possible. The complexity should be kept under the hood and should not leak to converters.
> 
> For non 1:1 mappings, the only reasonable solution I can see is doing a ""reconversion"" whenever we cannot handle a model change with an easy 1:1 converter.
> 
> For instance, in case of tables, a table style can be converted with attrribute-to-attribute mapping. However, table heading rows count cannot. It should re-trigger conversion of the entire table.

How could that look from code perspective? There are many possible APIs, but something that seems most imaginable today would look like this:

```plaintext

editor.conversion.for( 'downcast' ).elementToElement( {
	model: 'table',     // the root thing to be reconverted
	triggerBy: [
		'insert:table', // not sure about remove:table
		'insert:tableRow',
		'remove:tableRow',
		'insert:tableCell',
		'remove:tableCell',
		'attribute:headingRows:table',
		'attribute:headingColumns:table',
		'attribute:colspan:tableCell',
		'attribute:rowspan:tableCell',
	],
	view: ( conversionApi, modelTable ) => {
		return createViewTable( conversionApi, modelTable );
	}
} );
```

Of course, there's a lot that would have to happen under the hood and a inside createViewTable, but that'd be the gist.

That API, however, would not be sufficient to handle lists where there's no single ""root"". When a paragraph is inserted in the middle of a list (so, between two `listItem`s), the conversion of a model range (a fragment of the model) would have to triggered. This could be expressed like this:

```plaintext
editor.conversion.for( 'downcast' ).add( dispatcher => {
	dispatcher.on( 'insert', ( evt, data, conversionApi ) => {
		if ( isElementBetweenTwoListItems( data.modelElement ) ) {
			conversionApi.reconvert( findRangeConveringListBeforeAndAfter( data.modelElement ) );
		}
	} );
} );
```

However, we could perhaps also change the list implementation so it would have a `<list>` wrapper, while still being flat (indentation kept as an attribute). In this case, the list converter would look like this:

```plaintext
editor.conversion.for( 'downcast' ).elementToElement( {
	model: 'list',
	triggerBy: [
		'insert:list', // not sure about remove:list
		'insert:listItem',
		'remove:listItem',
		'attribute:listIndentation:listItem',
		'attribute:listType:listItem'
	],
	view: ( modelList, conversionApi ) => {
		return createViewList( modelList, conversionApi );
	}
} );
```

Of course, again, a lot of complexity would need to be handled by the conversion API, like reconverting the right things (markers?), handling re-mapping, consuming everything, etc. But that code is there today anyway and I hope it would be managable.

## Doubts

I know that there are certain doubts about this direction. That's most likely the reason why it wasn't implemented this way in the first place.

The main doubts I heard are:

*   Flickering
    *   What flickering? We talk about recreating the view structure. Plus, we don't have to recreate the entire structure ‚Äì we could reuse e.g. the content of cells when reconverting the table. It does not have to be converted again. Support for [slot conversion](https://github.com/ckeditor/ckeditor5/issues/1589) would probably help here too.
    *   Now, the interesting part is the rendering. Our renderer is one of the places which is seriously under-thought. It's a piece of code worth seriously redesign and if we consider that, then reusing existing DOM structures when rendering a new one is within our limits. This can be similarity based, or id based, or mapping based. It definitely requires research, but it's what modern frameworks handle and what we handle right now too, so I'm not especially worried about this.
    *   But even if we won't touch the renderer, no big deal should happen. DOM is changed synchronously. The user will not see the state between removing the previous table and inserting the new one. The only issue is with the scroll position but this can be dealt with relatively easily.
*   Memory consumption will increase.
    *   Not true.
    *   It may increase memory pressure (make GC run more frequently), but we need to make sure there are no leaks anyway and rewriting things make it easier to control when a thing can be completely unmapped because mapping is the only thing where elements are cross-referencing themselves (all references can be cleared easily here).
*   But it will make the engine more complex.
    *   I'm fine with that. Every hour we spend on the engine is paid off later on when feature code is simple, maintainable and stable because there's one engine and hundreds features. That's what CKEditor 5's engine is for ‚Äì it should hide the complexity under its hood.

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Reinmar,[],"[{'body': ""Another doubt that came to my mind: if we'd go with an API similar to what I mentioned, will features still be extensible?\r\n\r\nThat worries me, but the truth is ‚Äì they are not extensible currently. E.g. #2780 that's caused by the fact that implementer couldn't possibly know how to implement the media embed converter to make it extensible, or #507 which is hard to resolve because composing block features is super tricky due to the number of events and ways that would have to consider."", 'author': 'Reinmar'}, {'body': 'Idea for sample/guide: some kind of icon with multiple attributes in the model and the view has conditional elements (depending on attribute value). The problem is that writing atomic converter for each attribute might be hard. Having one simple converter for the whole thing would ease that. Change of the attribute requires different rendering of the main element contents. For instance do not render some label/output if attribute is falsy - ie in a counter display only numeric values bigger then `0`.', 'author': 'jodator'}, {'body': '# Slot conversion API\r\n\r\nTechnical Story: https://github.com/ckeditor/ckeditor5/issues/7729\r\n\r\n## Context and Problem Statement\r\n\r\nConverting complex model->view structures...\r\n\r\n## Decision Drivers\r\n\r\n* Developer friendly API.\r\n\r\n## Considered Options\r\n\r\n* Option 1: A `triggerBy` option that issues element re-render.\r\n* Option 2: A `triggerBy` option + special `<slot>` view element.\r\n\r\n## Pros and Cons of the Options\r\n\r\n### Option 1: A `triggerBy` option that issues element re-render.\r\n\r\nAs proposed in https://github.com/ckeditor/ckeditor5/issues/6510 a `triggerBy` is clean solution. Would work out of the box for a simple model elements, especially those without children, with many attributes triggering complex re-rendering.\r\n\r\nAdditionally, slot conversion is possible, but it seems that it would require additional API for the mapper.\r\n\r\n```js\r\neditor.conversion.for( \'downcast\' ).elementToElement( {\r\n    model: \'box\',\r\n    view: ( modelBox, { writer, mapper } ) => {\r\n        const viewBox = writer.createContainerElement( \'div\', { class: \'box\' } );\r\n\r\n        // ... complex inner View for attributes.\r\n\r\n        // Create ""slots""\r\n        for( const field of modelBox.getChildren() ) {\r\n            const viewField = writer.createContainerElement( \'div\', { class: \'box-content-field\' } );\r\n\r\n            writer.insert( writer.createPositionAt( contentWrap, field.index ), viewField );\r\n\r\n            // This binding must be ""special"" -> we can\'t override the mapping just yet.\r\n            mapper.bindSlotElements( field, viewField );\r\n        }\r\n\r\n        mapper.bindElements( modelBox, viewBox); // Seems redundant...\r\n\r\n        return box;\r\n    },\r\n    triggerBy: [\r\n        \'attribute:meta:box\',\r\n        \'insert:boxField\',\r\n        \'remove:boxField\'\r\n    ]\r\n} )\r\n```\r\n\r\n* :+1: - simpler API for fairly complex scenario.\r\n* :+1: - complex view structure created in one converter.\r\n* :+1: - all children of ""slot"" from the existing view don\'t need to be re-rendered.\r\n* :+1: - _might_ ease introduce JSX-like syntax for conversion.\r\n* :-1: - because everything is done inside one converter it might lead to poorly written converters (too big callback, single responsibilty concern, hard to read).\r\n* :-1: - the `bindSlotElements` looks odd to me, as whole binding mechanism here.\r\n\r\n### Option 2: A `triggerBy` option + special `<slot>` view element.\r\n\r\nOn top of Option 1 we can build a concept of ""slot"" elements. Here, top-level converter (if needed) might define a placeholder element to which render child.\r\n\r\n```js\r\neditor.conversion.for( \'downcast\' )\r\n    // 1. Wrapper converter with intermediate ""slot"" elements.\r\n    .elementToElement( {\r\n        model: \'box\',\r\n        view: ( modelBox, { writer, mapper } ) => {\r\n            const viewBox = writer.createContainerElement( \'div\', { class: \'box\' } );\r\n\r\n            // ... complex inner View for attributes.\r\n\r\n            // Create ""slots""\r\n            for ( const field of modelBox.getChildren() ) {\r\n                 writer.defineSlot( field, viewBox, field.index );\r\n            }\r\n\r\n            mapper.bindElements( modelBox, viewBox); // Seems redundant...\r\n\r\n            return box;\r\n        },\r\n        triggerBy: [\r\n            \'attribute:meta:box\',\r\n            \'insert:boxField\',\r\n            \'remove:boxField\'\r\n        ]\r\n    } )\r\n    // 2. Slot element converter.\r\n    .elementToElement( {\r\n        model: \'boxField\',\r\n        view: { name: \'div\', class: \'box-content-field\' }\r\n    } );\r\n```\r\n* :+1: - Top-level converter is simpler.\r\n* :+1: - Separation of concerns - provides a way to organize complex converters.\r\n* :+1: - Potential to re-use whole rendered view element instead of only it\'s children if the element itself did not change.\r\n* :-1: - Re-use of slot element might be hard to achieve if the slot element must also change (`<td>` vs `<th>` problem).\r\n', 'author': 'jodator'}, {'body': 'The base reconversion API using `triggerBy` is defined and implemented. It allows to reconvert simple or complex model structures. However,\r\n\r\n*   [ ] reconversion must include child views as well in the `triggerBy` definition because otherwise the `remove` converter removes too much ([details here](https://github.com/ckeditor/ckeditor5/issues/6830#issuecomment-708440079)) - block reconversion use with tables\r\n*   [ ] there is no programmatic API for reconversion (table cell post-fixer sitll uses `Differ.refreshItem()`but it could use a new [programmatic API (8252)](https://github.com/ckeditor/ckeditor5/issues/8252).\r\n*   [ ] docs should be written _after_ the above issues resolved (I can start writing them now for the `triggerBy`\r\n*   [ ] the `triggerBy`handles only direct children add/remove and does not support attributes.still', 'author': 'jodator'}, {'body': 'Outdated. Current work is tracked in #10294', 'author': 'niegowski'}]","['resolution:duplicate', 'type:improvement', 'status:discussion', 'package:engine', 'Epic', 'domain:dx', 'type:refactor']",CLOSED,6510.0,"['6506', '1589']"
ckeditor,ckeditor5,Monorepo migration stage II,"## Provide a description of the task

In #6466 we migrated all our CKEditor 5 packages to a single github repository.

When doing that we identified a few remaining tasks, that should be grouped in a separate epic task.

*   [x] [Docs](https://github.com/ckeditor/ckeditor5/issues/6479)
*   [x] Remaining ckeditor5-dev changes:
    *   [x] [Releasing](https://github.com/ckeditor/ckeditor5-dev/issues/606)
    *   [x] [Changelog generation](https://github.com/ckeditor/ckeditor5-dev/issues/608)

And a few minor cleanups.",mlewand,[],[],"['type:task', 'Epic', 'squad:devops']",CLOSED,6746.0,['6479']
ckeditor,ckeditor5,Migrate to beforeInput,"## üìù Provide a description of the improvement

AFAICT https://bugzilla.mozilla.org/show_bug.cgi?id=970802 and https://bugzilla.mozilla.org/show_bug.cgi?id=1449831 landed in Firefox 76. That means that we can replace the current mutation-based typing handling with `beforeInput` üéâ.

It'd probably be good to keep the mutation handler for environments that do not support `beforeInput` yet, even if we don't officially support them (probably older versions of FF or Safari). On all environments that support `beforeInput` we should use it, though.

The goal is to use `beforeInput` to handle:

*   typing (all types of it, including IME and autocorrect)
*   spellchecking
*   enter
*   delete

As next steps we can also consider using it as an additional trigger for:

*   inline formatting: bold, italic, etc.,
*   and perhaps more

Some additional issues that might get fixed with it:

*   #7903 - Crash when undoing typing (model-nodelist-offset-out-of-bounds)
*   #8052 - Exception thrown when undoing link with a non-collapsed selection

---

*   [x] #7995 ‚Äì Implement the `beforeInput` support detection
*   [x] #7996 ‚Äì Improve InputObserver so the event passes and normalizes additional information
*   [x] #7997 ‚Äì Migrate the Input plugin to the `beforeInput` event
*   [x] #7998 ‚Äì Migrate the Delete plugin to the `beforeInput` event
*   [x] #7999 ‚Äì Migrate the Enter and ShiftEnter plugins to `beforeInput`
*   [ ] #8000 ‚Äì Use format\* `beforeInput` types across the features
*   [ ] #8001 ‚Äì Use insert\* `beforeInput` types across the features (list, horizontal line, etc.)
*   [ ] #8008 ‚Äì Test and stabilize composition (IME) using beforeInput on desktop browsers (Mac)
*   [ ] #8009 ‚Äì Test and stabilize composition (IME) using beforeInput on desktop browsers (Windows)
*   [ ] #8010 ‚Äì Test and stabilize composition (IME) using beforeInput on desktop browsers (Linux)
*   [ ] #8011 ‚Äì Test and stabilize composition (IME) using beforeInput on Android
*   [ ] #8012 ‚Äì Test and stabilize composition (IME) using beforeInput on iOS
*   [ ] #8013 ‚Äì Test and stabilize beforeInput in Cloud Features

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Reinmar,['oleq'],"[{'body': ""Order of things:\n1. In the beginning, we're merging into a feature branch (`i/7462-beforeinput-wip`).\n2. Then we merge the feature branch to master but the feature is disabled by default (see #7995).\n3. Then we merge issues to master.\n4. Then we pray."", 'author': 'oleq'}, {'body': 'hi, any progress here?', 'author': 'liuda101'}, {'body': '+1 for this, Chinese IME support is really of critical importance to my project\r\nSee #10219 #10284', 'author': 'KevinWang15'}, {'body': 'FYI: Firefox supports `beforeinput` since v87 (Mar 2021). The current version is v93. This will dramatically simplify our codebase.\r\n\r\n[https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/87](https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/87)\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event#browser_compatibility\r\n\r\n![image](https://user-images.githubusercontent.com/1099479/136393628-5405485e-2762-494c-b20a-dcbc6f15c248.png)\r\n', 'author': 'oleq'}, {'body': 'hi, any progress here?\r\n\r\n', 'author': 'keng0o'}, {'body': 'The same problem is occurring in Japanese.\r\nWhat is the current situation?', 'author': 'keng0o'}, {'body': 'hi, any progress here?', 'author': 'vdfor'}, {'body': ""There's been a lot of work put in this ticket in the past, but then we had to stop for about 1 year.\xa0\r\n\r\n**The good news is that we restarted the work** :tada: **.** However, we continue in a new ticket to have a clearer picture of where we are because a lot of things happened in the meantime.\r\n\r\nThe new ticket is #11438 and I'm closing this one."", 'author': 'Reinmar'}]","['resolution:duplicate', 'type:improvement', 'domain:ui/ux', 'support:2', 'domain:typing/ime', 'Epic', 'squad:core']",CLOSED,7462.0,"['8010', '8012', '8009', '7996', '8001', '8011', '8013', '8008', '7999', '7995', '7998', '7997', '8000']"
ckeditor,ckeditor5,Drag and drop of textual content and widgets,"## üìù Provide a description of the new feature

Extracted from [#2664](https://github.com/ckeditor/ckeditor5/issues/2664). Scenario A, B, and C with the assumption that dropping is allowed only in text positions or on the widgets.

---

If you'd like to see this feature implemented, add a üëç reaction to this post.",niegowski,['niegowski'],"[{'body': '![](https://user-images.githubusercontent.com/1232187/109486255-ea4a3100-7a82-11eb-8202-f070b82acf40.gif)', 'author': 'niegowski'}, {'body': '@niegowski Game changing Thx alot', 'author': 'castroCrea'}, {'body': 'What do you think of adding a drag indicator possibility (it can automatically select the block)? I think it is nice for the UX.\r\n\r\n![image](https://user-images.githubusercontent.com/20707343/109486871-bd4a4e00-7a83-11eb-8418-d7592d6e45bb.png)\r\n', 'author': 'castroCrea'}, {'body': ""@castroCrea If I understand correctly, these are scenarios C and D from #2664 and outside the scope of the current work. There's dedicated #7731 for the block-level dnd."", 'author': 'Reinmar'}, {'body': ""The cool thing is that @niegowski managed to make block widgets draggable in an inline-manner, but with what I think is a reasonably good UX. So it's not yet a proper block-level drag&drop, but it's a major improvement over what's currently completely impossible."", 'author': 'Reinmar'}, {'body': ""Awesome stuff, I've been working on my own solution based on using text ranging, but it doesn't seem to be viable.  I may end up going with block level only."", 'author': 'seancowan-dev'}]","['type:feature', 'package:clipboard', 'domain:ui/ux', 'Epic', 'squad:core']",CLOSED,9128.0,['2664']
ckeditor,ckeditor5,Project migration to webpack 5,"The list below contains (I hope) all tasks required for full migration to webpack 5. If something is missed, please, mention it in a comment. 

‚ö†Ô∏è Before starting the task, make sure that https://github.com/ckeditor/ckeditor5/issues/6770 is resolved.

## Scope

### Tools

- Since all changes that will be made should also be described in the migration guide for integrators, it would be good to write key points for particular steps in the issue.
- [x] Bump the version in `ckeditor/ckeditor5` and `ckeditor/ckeditor5-dev`

    ```diff
    - ""webpack"": ""^4.43.0"",
    - ""webpack-cli"": ""^3.3.11""
    + ""webpack"": ""^5.37.0"",
    + ""webpack-cli"": ""^4.7.0""
    ```

    - Consider upgrading and adjusting the configuration for loaders and plugins to avoid checking the same things twice.
- [x] Verify whether `ckeditor5-build-*` packages are built properly.
- [x] Verify whether manual tests work.
    - Use `yarn run manual` for preparing the HTTP server,
    - Use `yarn run manual:verify` to check whether tests do not throw errors
- [x] Verify whether automated tests work.
    - Use `yarn run test ...` for executing the automated tests,
    - Check whether all options work (`--coverage` must be supported).
- [x] Verify whether DLLs work.
    - Use `yarn run dll:build`
    - It touches the internal repository as well.
- [x] Verify whether documentation works.
    - Use `yarn run docs` for building the documentation,
    - Make sure to adjust the `snippetadapter.js` module if needed,
    - Use `yarn run docs:serve` for starting the HTTP server,
    - Use `yarn run docs:verify` for running the crawler (the same like for manual tests)
    - Verify whether the content-styles extractor still works.
- [x] As we change the snippet adapter, may Umberto be changed as well?
- [x] Upgrade webapck in the package generator
- [x] Bump dependencies in Online Builder. Talk with Maciek or/and Pawe≈Ç if you need help.
    - When preparing a build, use webpack 5.
    - Generated build inside the package should use webpack 5.
- [x] Verify whether Cloud Services uses webpack. Talk with Bartek.

### Documentation

- [x] Re-write or adjust guides in our documentation
    - Building from the source without frameworks (React, ‚Ä¶)
    - Building from the source when implementing one of our integration (React, ‚Ä¶)
    - Support for different languages (e.g. building the editor with polish translations)
    - Extracting CSS to a separate file
    - Module replacement via webpack (e.g. replacing an icon)
- [x] Create the migration guide for integrators.
    - Cover a case: ""I cannot use webpack 5 yet.""

### Nice to have

- [ ] Integrations
    - React (`ckeditor5-react`)
    - Vue (`ckeditor5-vue2` and `ckeditor5-vue`)
    - Angular (`ckeditor5-angular`)
- [ ] Does the `ckeditor5-inspector` require the upgrade?

## Loaders

1. `postcss-loader` for handling PostCSS syntax
    - [v4.0.0](https://github.com/webpack-contrib/postcss-loader/releases/tag/v4.0.0) changes the API in the webpack configuration and requires adding `css-loader`
    - [v5.0.0](https://github.com/webpack-contrib/postcss-loader/releases/tag/v5.0.0) requires webpack 5.
2. `style-laoder` for adding the `<script>` tag on a page
    - [v2.0.0](https://github.com/webpack-contrib/style-loader/releases/tag/v2.0.0) safe bump for us
3. `css-loader`
    - not used yet but `postcss-loader` (v4+) requires it
    - [v5.0.0](https://github.com/webpack-contrib/css-loader/releases/tag/v5.0.0)
4. `istanbul-instrumenter-loader` for checking the coverage. 
    - It does not work with DLLs imports.
    - We need to find an alternative.

## Plugins

- `ckeditor5-dev-webpack-plugin` already works in webpack 5.
- `mini-css-extract-plugin` used by the snippet adapter for extracting the CSS to a separate file.
- `karma-webpack` for automated tests ([see BC](https://github.com/ryanclark/karma-webpack/blob/master/CHANGELOG.md#500-alpha0-2018-12-13)).
- `terser-webpack-plugin` - used for minification the JS produced by webpack
    - Do we need it? Let's check what webpack 5 offers.
- `progress-bar-webpack-plugin` - used for displaying progress bar in the snippet adapter.

Most of the mentioned changes were covered in the PR ‚Äì [https://github.com/ckeditor/ckeditor5-dev/pull/673/files](https://github.com/ckeditor/ckeditor5-dev/pull/673/files). Feel free to see whether it helps.",pomek,['pomek'],"[{'body': ""Regarding the documentation:\r\n\r\n- Update guides to use the latest webpack (5)\r\n- Migration guide: \r\n\t- CKEditor 5 recommends using webpack 5\r\n    - Upgrade `postcss-loader` configuration object\r\n    - It requires adding the `css-loader` loader (show a code snippet)\r\n    - Mention why we don't use the latest version of loaders (they drop support for webpack 4)"", 'author': 'pomek'}, {'body': '~~An issue about making CKEditor 5 dev utils compatible with webpack 5 ‚Äì https://github.com/ckeditor/ckeditor5/issues/10735 ‚Äì this one unblocks developers to prepare builds using webpack 5 (without waiting for decisions made by us).~~\r\n\r\nCKEditor 5 dev utils work with webpack 5.', 'author': 'pomek'}, {'body': 'Migration to webpack 5 finished. It will be a part of the upcoming release, which will happen next year (most probably, January).', 'author': 'pomek'}]","['type:task', 'Epic', 'bc:major', 'squad:devops']",CLOSED,9799.0,['6770']
ckeditor,ckeditor5,Find and replace 29.0.0 followups,"## Provide a description of the task

There are couple of issues that we decided to move from v28.0.0 to v29.0.0 release. This epic will list them.

<table><tbody><tr><td><strong>Closed</strong></td></tr><tr><td><a href=""https://github.com/ckeditor/ckeditor5/issues/10146"">Find and replace multiroot support</a></td></tr><tr><td><a href=""https://github.com/ckeditor/ckeditor5/issues/10014""><strong>The find and replace view does not indicate that no matches were found</strong></a></td></tr><tr><td><a href=""https://github.com/ckeditor/ckeditor5/issues/9934""><strong>Action when there are no more search results available.</strong></a></td></tr><tr><td><a href=""https://github.com/ckeditor/ckeditor5/issues/10001""><strong>Integrate find and replace plugin with source mode</strong></a></td></tr><tr><td><a href=""https://github.com/ckeditor/ckeditor5/issues/10040""><strong>Add missing badges README.md</strong></a></td></tr></tbody></table>",mlewand,[],"[{'body': 'I did iterative merge to `master` with the changes so far (in 9b44100)', 'author': 'mlewand'}]","['type:improvement', 'type:task', 'Epic', 'squad:features', 'package:find-and-replace']",CLOSED,10024.0,"['9934', '10001', '10040', '10014', '10146']"
ckeditor,ckeditor5,Redesign and introduce new reconversion system,"## EDIT (Summary of changes)

You can find a summary of changes in the conversion system in this post: [https://github.com/ckeditor/ckeditor5/issues/11268#issuecomment-1061655977](https://github.com/ckeditor/ckeditor5/issues/11268#issuecomment-1061655977)

There's also a migration guide that covers related changes: [Migration to CKEditor 5 v33.0.0](https://ckeditor.com/docs/ckeditor5/latest/builds/guides/migration/migration-to-33.html).

## Why

### What do we have now

There is a downcast helper for `elementToElement` with a `triggerBy` option that triggers reconversion of a specific model element by removing its view representation (but keeping mappings), triggering the new view structure conversion callbacks (for that model element only), and reusing the child elements' old view representations.¬†

### What‚Äôs wrong with what we have now

To downcast a single model element to a slightly more complex structure we need to use the low-level API (so we need to take care of consuming what we converted and to bind model elements with view elements). That's because we are converting a subtree of a model structure. The reusing of view elements works sort of in a ""magical"" way.¬†

There is also an issue about the current implementation conflicting different `triggerBy` converters: #9641.

### What could we improve in the current solution

It could be more understandable if a single `elementToElement` converter would handle a single model element and do not touch its children elements. The conversion callback could provide a view structure with the special placeholders (slots) that model child elements should be downcasted into.

### Why do we think it can be done better?

The current `triggerBy` usage is very confusing. It requires to convert (in a single converter) not only an element itself but also its model child elements (and only their content is reused). This would be more declarative if we could provide conversion for a single model element to a bigger view structure with placeholders/slots for model child elements so that it could take care of inserting view elements in the correct positions in the view structure (not only as a direct child of the main element).

That slots could also have conditions for example to handle specific table rows (`thead` vs `tbody` that depends on `headingRows` attribute value).

### What do we have prototyped so far? Where‚Äôs that code?

The early PoC is in the [list reconversion branch](https://github.com/ckeditor/ckeditor5/compare/i/9407-list-reconversion) (that includes a lot of other experiments for `rangeToStructure` conversion). That branch is currently broken (because of changes in progress). The most interesting function is [`insertSlotted`](https://github.com/ckeditor/ckeditor5/blob/4a001997e3f522994efc0ef584cd53902d69c312/packages/ckeditor5-engine/src/conversion/downcasthelpers.js#L1084) that is supposed to get triggered after the old view was removed (but the view mapping was temporarily kept until the end of the conversion process to be reused while converting slots' content).

## What

### A high-level overview of a new mechanism

The solution could be split into layers:

*   `DowncastDispatcher` could fire a new `reduceChanges` event before the conversion process starts to allow features (or conversion helpers) to alter the list of changes provided by the `Differ` so it could detect cases where the reconversion should be used. The re-conversion would be split into 2 events - one to remove the old view representation of a model element and one to insert a new representation. The old view elements would get removed from the view and unbound in the `Mapper` but it could keep temporal mapping to allow reusing view elements that got removed in the same conversion process. Those would get flushed at the end of the whole conversion.
*   `DowncastHelpers` `elementToElement` and `elementToStructure` would listen for the `reduceChanges` event to register callbacks for `triggerBy` changes to trigger re-conversion is a specified situation.
*   `elementToStructure` downcast helper could provide a factory for placeholders/slots so the simple view generator could put those into the structure and the helper itself would take care of converting those slot's content or reusing the view that was previously there.

### Example API proposal

The high-level API:

```javascript
editor.conversion.for( 'downcast' ).elementToStructure( {
    model: 'table', 
    view: ( modelElement, conversionApi ) => {
        const viewElement = conversionApi.writer.createContainerElement( 'div' );

        // ...

        writer.insert( writer.createPositionAt( viewElement, 0 ), conversionApi.slotFor( modelElement, 'children' ) );

        // ...

        return viewElement;
    }, 
    triggerBy: { 
        attributes: [ 'headingRows' ]
    }
} );
```

### Success criteria

*   Simple conversion for a single model element to a bigger view structure without taking care of mapping or consumables.
*   Can be used in tables to simplify the current downcast of the whole table and enable its reconversion with the preservation of table rows and cells.
*   Should be adjustable to use with a `rangeToStructure` future helper that will be used for the document list conversion.

### Risks, other things to change.

*   Temporal mappings kept for the conversion process are not yet in PoC (it was a simple one converter solution).
*   It seems that markers downcasted to view should properly reconvert themself (as it works for the current reconversion).

## When

### Why now

The PoC was prepared while working on #9784 and #9783. This could be extracted from that PoC as it's a separate feature that would be later used by `rangeToStructure` downcast helper.

### What‚Äôs next

The next step would be to implement `rangeToStructure` downcast helper and use it for document list conversion.

---

If you'd like to see this feature implemented, add a üëç reaction to this post.",niegowski,['niegowski'],"[{'body': 'The `elementToStructure` PoC is now extracted to a new branch: [https://github.com/ckeditor/ckeditor5/compare/ck/10294-elementToStructure](https://github.com/ckeditor/ckeditor5/compare/ck/10294-elementToStructure)\r\n\r\nIt also implements the logic of `remove` + `reconvert` diff items.', 'author': 'niegowski'}, {'body': '> There is also an issue about the current implementation conflicting different `triggerBy` converters: #9641.\r\n\r\nAnother issue: #10306 (not sure if related).', 'author': 'Reinmar'}, {'body': 'I just noticed another bug in the current reconversion implementation: #10314', 'author': 'niegowski'}, {'body': 'I have couple thoughts after working on adding support for reconversion in `elementToElement` downcast helper.\r\n\r\nLet me put them all together in this ticket so they are at least noted somewhere.\r\n\r\n### Children prop `Boolean|Function`\r\n\r\nThe new API for describing `model` in `elementToElement` config object looks like this:\r\n\r\n```js\r\nmodel: {\r\n\tname: \'items\',\r\n\tattributes: [ \'mode\' ],\r\n\tchildren: true\r\n},\r\n```\r\n\r\nI found some obscure use cases where it could be useful if `children` prop accepted not only `boolean` but also a function returning `boolean` (ideally with `modelElement` passed). This way we could set `children` dynamically based on model element attribute / element type / it\'s children type etc.\r\n\r\n```js\r\nmodel: {\r\n\tname: \'items\',\r\n\tattributes: [ \'mode\' ],\r\n\tchildren: ( modelElement ) => modelElement.getAttribute( \'mode\' ) !== \'no-reconvert\'\r\n},\r\n```\r\n\r\nI don\'t have any realistic use cases for this at the moment, so it\'s just for the records. Probably not very important nor needed.\r\n\r\n### Docs / comments\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/e10b4ea05cce5b75ec06a7ade85b70b3de1a6c44/packages/ckeditor5-engine/src/conversion/downcasthelpers.js#L229-L230\r\n\r\nDo we have to mention consumables here? Isn\'t enough to say the second part:\r\n\r\n> **View will be reconverted if any of the listed attributes will change.**\r\n\r\nAlso, to keep it consistent with other parts of this API, shouldn\'t we accept both array of strings and string for single attribute?\r\n\r\n```js\r\n@param {String|Array.<String>} [config.model.attributes]\r\n```\r\n________________________\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/e10b4ea05cce5b75ec06a7ade85b70b3de1a6c44/packages/ckeditor5-engine/src/conversion/downcasthelpers.js#L219-L220\r\n\r\nI know it has been added as part of ""improving docs"" commit, but this note is still a bit unclear to me. Yeah it describes the constraint but does not say why nor what happens if you don\'t follow it. Will it raise an error? Will it crash?\r\n\r\nI guess this probably might be a part of improving conversion docs and be just a matter of putting a link near this note.\r\n\r\n\r\n@Reinmar @niegowski FYI', 'author': 'dawidurbanski'}, {'body': ""> Also, to keep it consistent with other parts of this API, shouldn't we accept both array of strings and string for single attribute?\r\n> \r\n> ```js\r\n> @param {String|Array.<String>} [config.model.attributes]\r\n> ```\r\n\r\nThe normalization accepts it, maybe it's just missing JSDoc?"", 'author': 'niegowski'}, {'body': 'Hopefully this will solve issues like https://github.com/ckeditor/ckeditor5/issues/10306', 'author': 'Inviz'}, {'body': 'Crosslinking the summary of changes for this huge feature: https://github.com/ckeditor/ckeditor5/issues/11268#issuecomment-1061655977', 'author': 'dawidurbanski'}]","['type:feature', 'package:engine', 'support:2', 'Epic', 'domain:dx', 'squad:core']",CLOSED,10294.0,['11268']
ckeditor,ckeditor5,Resolve integration issues between commands and features that block editing,"This epic started with a _""Export to PDF/Word should work when restricted editing is enabled""_ story that we soon escalated to #10308.

Initially, I thought that we should not be using commands for things that do not change the data. It would immediately solve the original story.

However, during the course of work on #10308, we understood that it's reasonable to use commands for such actions. That bootstrapped another topic: Feasibility research regarding `Command#affectsData` (#10493).

The research proved that this is a reasonable solution ([**check out Dawid's amazing summary**](https://github.com/ckeditor/ckeditor5/issues/10493#issuecomment-933356390)**)** but followups were born.

This ticket groups them all.

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Reinmar,[],"[{'body': 'List of issues closed in this Epic:\r\n\r\n* Selection commands are disabled in read-only, comments-only and restricted editing modes. #10635  \r\n* Find commands are disabled in comments-only, restricted editing and track changes modes. #10636  \r\n* Restricted editing: cannot navigate through restricted exceptions in read-only and comments-only modes. \xa0#10634  \r\n* Command#affectsData cleanup and merge #10670  \r\n* Add tests to the new Command#affectsData property #10671  \r\n* Add support for affectsData in MultiCommand #10672  \r\n* Research feasibility of Command#affectsContent #10493', 'author': 'Reinmar'}]","['type:improvement', 'Epic', 'squad:core']",CLOSED,10676.0,['10493']
ckeditor,ckeditor5,Migrate to beforeInput vol 2,"## üìù Provide a description of the new feature

An epic for revival of #7462 and further work.

*   Feature branch: [`ck/epic/11438-migrate-to-beforeinput`](https://github.com/ckeditor/ckeditor5/tree/ck/epic/11438-migrate-to-beforeinput)
*   Draft PR: #11456

### ToC

*   #11448
*   #11626
*   #11636
*   #11736
*   #12058¬†
*   ckeditor/ckeditor5#11904
*   Post-MVP: #12425¬†

---

If you'd like to see this feature implemented, add a üëç reaction to this post.",oleq,"['oleq', 'niegowski']","[{'body': '@oleq Will this also address #2045? ', 'author': 'wimleers'}, {'body': 'In the tracking mode, how long will this problem take? Currently, it seriously affects the use', 'author': 'huzedong2015'}, {'body': ""Small status update as it's hard to track the current work based on our activity on GitHub.\r\n\r\n*   It seems that the entire effort will consist of 4 main parts:\r\n    1.  Migrating from mutation observer to `beforeInput`. This is done :white\\_check\\_mark:. \xa0But the outcome was: no IME support, no Android support.\r\n    2.  Bringing back IME support. This is currently on review in #12024 (update: it's merged now :white\\_check\\_mark:) but it was tested by dozens of users already and the feedback is great. We fixed most issues with IME that we had, including composing when using features like track changes. The snapshot of that work can be tested on [https://ckeditor5.github.io/misc/ime-snapshot-220610/ckeditor5/34.1.0/](https://ckeditor5.github.io/misc/ime-snapshot-220610/ckeditor5/34.1.0/)\r\n    3.  Bringing back acceptable Android support (it was never perfect so we don't aim at perfect from day one). This is where we are right now. There's huge research behind the scene to understand how to approach this. We're looking for quick wins here.\r\n    4.  Improving the implementation, especially for Android as the rest seems already really stable (as I mentioned ‚Äì it was tested with dozens of users).\xa0\r\n*   Once we have the first 3 points parts done, we'll be ready to release the entire work. I feel that we're really close to this, but we're still looking at how to nail down the Android support. The foundation is really strong so I'm not afraid about that.\r\n*   If you want to test it now:\r\n    *   Check out the snapshot of the docs from June: [https://ckeditor5.github.io/misc/ime-snapshot-220610/ckeditor5/34.1.0/](https://ckeditor5.github.io/misc/ime-snapshot-220610/ckeditor5/34.1.0/)\r\n    *   If you want to build your own editor build on this work, see #12024. The latest work is currently on `ck/11438-beforeinput-ime-research-vol1.1` but once #12024 is merged it will be on `ck/epic/11438-migrate-to-beforeinput`."", 'author': 'Reinmar'}, {'body': ""> *   Check out the snapshot of the docs from June: https://ckeditor5.github.io/misc/ime-snapshot-220610/ckeditor5/34.1.0/\r\n\r\nIf you have any feedback, especially for CJK languages, we'll appreciate if you share it here. The earlier we know about something, the better :)"", 'author': 'Reinmar'}]","['type:feature', 'package:engine', 'package:typing', 'domain:typing/ime', 'Epic', 'squad:core', 'status:in-progress']",CLOSED,11438.0,['11904']
ckeditor,ckeditor5,[Style dropdown] Stabilization,"This issue aggregates bugs and improvements to the ckeditor5-style feature.

# ToC

*   [x] #11607
*   [x] #11576
*   [x] #11581
*   [x] #11584
*   [x] #11582
*   [x] #11575
*   [x] #11588
*   [x] #12441 
*   [x] #11748
*   [x] #11578
*   [x] #11585
*   [x] #11590
*   [x] #11580
*   [x] #11709",oleq,[],"[{'body': 'Should [#13341](https://github.com/ckeditor/ckeditor5/issues/13341) be added to this list?', 'author': 'jameswilson'}, {'body': '+1', 'author': 'wimleers'}, {'body': '@jameswilson thanks, added!', 'author': 'Witoso'}, {'body': 'Closing this to add it to the iteration in which we fixed a significant amount of issues. Tracking further improvements here: https://github.com/ckeditor/ckeditor5/issues/14274.', 'author': 'Witoso'}]","['Epic', 'squad:core', 'resolution:resolved', 'package:style']",CLOSED,11574.0,"['12441', '11607', '11576', '11588', '11582', '11581', '11584', '11580', '11709', '11578', '11585', '11575', '11748', '11590']"
ckeditor,ckeditor5,Migrate CKEditor 5 to TypeScript,"Back in 2015 when we were bootstrapping CKEditor 5 TypeScript wasn't yet mature enough and didn't yet seem as a safe choice taken the long horizon of CKEditor 5's life and fate of e.g. CoffeeScript or Backbone (that were the popular choices at that time).

Nowadays, for a large scale, complex project such as CKEditor 5, TypeScript is a clear choice. We've been actually looking at it for a [longer](https://github.com/ckeditor/ckeditor5/issues/1415) time but it was clear that we need to pick the right moment for a migration. The moment has come ü•≥

The main goals of the migration:

*   Improving the DX for the community by [providing typings for CKEditor 5](https://github.com/ckeditor/ckeditor5/issues/504). This is by far the most popular request on our issue tracker and it's visible how important it is to the community also by the amount of work put by many people, including heroes such as @fedemp. Providing official typings will benefit integrators and plugin developers. It will improve the DX when working with CKEditor 5 and stability of the solutions.
*   Improving the core team experience and toolset. While using TypeScript will naturally make us happy (we really wanted to migrate for a long time :smile:), we believe that this will have a positive outcome for everyone. CKEditor 5 is a complex project with a large API. We're rigorously documenting the types from day one, but we had to resort to JSDoc for that. It helps during development, but it's nowhere near what we'll have with TypeScript. Type validation, better API documentation, better suggestions, refactoring options ‚Äì this will all speed up the development and potentially improve the quality even more.

We're right now cooking a plan of action, so I won't share more details for now. Some two last points that I want to mention for now are:

*   We're determined to not break the backward compatibility (except minor aspects). We are aiming at making the migration for a great majority of JS-based projects that used CKEditor 5 for now seamless.
*   This project will take several months due to the scale of CKEditor 5. We'll be migrating step by step, most likely starting from the infrastructure and one or two first packages.
*   We'll use this ticket for further developer as #504 was already too long and does not exactly cover the entire scope of the project for us. We'll start sharing our ideas and questions on what should we deliver here in this thread and potentially in #504 for better visibility too. But this one is the one.
*   Once again I'd like to thank @fedemp and everyone else who contributed to the [community-driven DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/pulls?q=is%3Apr+sort%3Aupdated-desc+ckeditor5). For at least a couple of months it's still the place to go when you need typings for CKEditor 5.

Keep your fingers crossed and stay tuned for more information.",Reinmar,[],"[{'body': ""> *   Once again I'd like to thank @fedemp and everyone else who contributed to the [community-driven DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/pulls?q=is%3Apr+sort%3Aupdated-desc+ckeditor5). For at least a couple of months it's still the place to go when you need typings for CKEditor 5.\r\n\r\nI don't know if it's possible for us to stay compatible with that, though. Should we?"", 'author': 'arkflpc'}, {'body': ""> > * Once again I'd like to thank @fedemp and everyone else who contributed to the [community-driven DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped/pulls?q=is%3Apr+sort%3Aupdated-desc+ckeditor5). For at least a couple of months it's still the place to go when you need typings for CKEditor 5.\r\n> \r\n> I don't know if it's possible for us to stay compatible with that, though. Should we?\r\n\r\nOfficial typings do not need to be compatible with DT typings. And if official typings somehow contradict those at DT, the official should be the definitive answer (assuming CKEditor is going to be rewritten in TS).  "", 'author': 'fedemp'}, {'body': ""> This project will take several months due to the scale of CKEditor 5. We'll be migrating step by step, most likely starting from the infrastructure and one or two first packages.\r\n\r\nYou team surely know better, but I suggest you start with `utils`, `core`, and lastly `engine`. `utils` have very little dependencies, and `engine` is a huge monster to tackle."", 'author': 'fedemp'}, {'body': 'Hi @fedemp! I tried to reach out to you on LinkedIn. Could you check your invitations or write back to me at p.koszulinski@cksource.com?', 'author': 'Reinmar'}, {'body': 'Some ideas for post-MVP:\n- Better integration with Angular and React\n- Update guides', 'author': 'arkflpc'}, {'body': ""### Status Update:\r\n\r\n#### What we've done:\r\n\r\n1.  We rewrote the `ckeditor5-utils` package to TypeScript (#11755).\r\n2.  We're now able to run both manual and automated tests (#11888).\r\n3.  We have working rules for _eslint_ (#11719).\r\n4.  We can build DLLs (almost done, #11718).\r\n\r\nIt's all on a [feature branch](https://github.com/ckeditor/ckeditor5/tree/ck/epic/11708-migrate-typescript-mvp) yet. But as soon as we'll finish updating the release process (#11720, work-in-progress), we can get to `master` branch and release it. The packages on NPM won't contain typings yet, because that would conflict with the community-provided ones. We're going to start generating them after we'll finish the work on `ckeditor5-engine` (#11724, work-in-progress), `ckeditor5-ui` (#11726) and `ckeditor5-core` (#11727) and stabilize the typings."", 'author': 'arkflpc'}, {'body': ""> The packages on NPM won't contain typings yet, because that would conflict with the community-provided ones.\r\n\r\nWhen the time comes, open an issue on DefinitelyTyped to remove those. :+1:"", 'author': 'fedemp'}, {'body': ""We will, @fedemp. We're going to stabilize them first."", 'author': 'arkflpc'}, {'body': ""![](https://media.giphy.com/media/S9iMXx6Lqrr5mJoMxC/giphy.gif)\r\n\r\nIt's worth mentioning that CKEditor 5 v35.0.0 is out and it's the first version where TS code was used (namely `@ckeditor/ckeditor5-utils`) üëè \r\n\r\nAs for what's next...\r\n\r\nWe're right now reviewing https://github.com/ckeditor/ckeditor5/pull/12188 and engine was **by far** the biggest and most complex package to port. \r\n\r\nNext packages to migrate: core and utils. Soon, we'll be able to start porting features which should be easy to do concurrently and much much faster."", 'author': 'Reinmar'}, {'body': ""## Status update\r\n\r\nWe released `ckeditor5-engine` (#11724) in TypeScript. `ckeditor5-ui` ([#11726](https://github.com/ckeditor/ckeditor5/issues/11726)) and `ckeditor5-core` ([#11727](https://github.com/ckeditor/ckeditor5/issues/11727)) are done on feature branch (`ck/11726-11727-ts-core-ui`). They will be merged in few next weeks.\r\n\r\nThe next milestone is to select API documentation generator and integrate it with our tooling. After it's done, we will go on with other packages that are in JavaScript yet."", 'author': 'arkflpc'}, {'body': ""Some status update.\r\n\r\nWe're doing good progress migrating packages. We covered more than 50% of them, including all the core ones (that are by far the biggest ones). So in general, it feels like we're 75% done.\r\n\r\nOnce all packages are migrated, we'll start publishing the types to npm. So far, those are omitted as they would be incomplete.\r\n\r\nKeep your fingers crossed, TS is coming :runner:"", 'author': 'Reinmar'}, {'body': 'Some stats about progress:\n\nLanguage|files|blank|comment|code\n:-------|-------:|-------:|-------:|-------:\nTypeScript|600|17589|62313|54875\nJavaScript|199|4898|14206|16609\n--------|--------|--------|--------|--------\nSUM:|799|22487|76519|71484\n', 'author': 'arkflpc'}, {'body': ""I'm working on a new application and am in the process of deciding what editor I'd like to base the application on.   It's not liklely to be going live for at least 6 months (loads to do, maybe longer depending on what's else I need to implement)    My preferred choice, especially as it's a very active project is to use CKEditor, but as you can guess, I'm working in Typescript with React.  Is there some way a work around that I can use (noobie instructions would be appreciated) that will allow me to use CKEditor5 in my application whilst waiting for this major refactor?\r\n\r\nI feel that the alternative I'm looking at would be shooting myself in the foot in the long run."", 'author': 'colindawson'}, {'body': '@colindawson,\r\n\r\nCKEditor is usable in TypeScript projects today. There are [excellent community provided](https://github.com/DefinitelyTyped/DefinitelyTyped) types you can rely on.\r\n\r\nThe refactor you mentioned is only about adding types to the code.\r\n\r\nWhen we are ready to provide our types in `npm` packages, they will not be compatible. But this should affect mostly custom plugins that are interacting with core components of the editor. The types for API used for embedding and configuring CKEditor will not be modified much. Even in this case, only types will have to be adjusted.', 'author': 'arkflpc'}, {'body': ""@arkflpc I'm extremely confused about this, it's all new to me.  Looking at the link you posted, it's gave me an idea to look for @types/ckeditor and I found this https://www.npmjs.com/package/@types/ckeditor__ckeditor5-core  Is this the kind on thing that you are referring too?\r\n\r\nI've figured out enough to make it work, there's nothing in the link you provided,  what I needed to do is create a file called types/ckeditor.d.ts  with the following content\r\n\r\n```\r\ndeclare module '@ckeditor/ckeditor5-build-classic' {\r\n    import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\n    const ClassicEditor = typeof ClassicEditor;\r\n\r\n    export {ClassicEditor};\r\n}\r\n\r\ndeclare module '@ckeditor/ckeditor5-react' {\r\n    import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n    import Event from '@ckeditor/ckeditor5-utils/src/eventinfo'\r\n    //import { EditorConfig } from '@ckeditor/ckeditor5-core/src/editor/editorconfig'\r\n    import * as React from 'react';\r\n    const CKEditor: React.FunctionComponent<{\r\n        disabled?: boolean;\r\n        editor: typeof ClassicEditor;\r\n        data?: string;\r\n        id?: string;\r\n        config?: EditorConfig;\r\n        onReady?: (editor: ClassicEditor) => void;\r\n        onChange?: (event: Event, editor: ClassicEditor) => void;\r\n        onBlur?: (event: Event, editor: ClassicEditor) => void;\r\n        onFocus?: (event: Event, editor: ClassicEditor) => void;\r\n        onError?: (event: Event, editor: ClassicEditor) => void;\r\n    }>\r\n    export { CKEditor };\r\n    }\r\n```\r\n\r\nThis was enough to get my react app from failing to compile and show the editor.   I'm sure this is a huge hack.  And I'm looking forward to being able to scrap this when typescript support is ready.   I much prefer this to using a different control.   I've posted this here, so that any other newbies to typescript and CKEditor5 can be helped whilst waiting for the Typescript rewrite to be completed."", 'author': 'colindawson'}, {'body': ""@colindawson, we just finished more than a year of development to replace CKEditor 4 with CKEditor 5 (find the sources at https://github.com/CoreMedia/ckeditor-plugins). And yes, the package you spotted is one of them. Another (for the classic editor) is: https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ckeditor__ckeditor5-editor-classic.\r\n\r\nWe started off with custom typings, which is a very error-prone and lengthy process, as if you pull one thread, you will get all the rest (so, hats off to CKEditor-team addressing this eventually!).\r\n\r\nWhen your build is set up and ready, there is actually nothing more to do, than:\r\n\r\n* Add your CKEditor 5 dependency.\r\n* Add a dependency to the corresponding types.\r\n\r\nA minimal package with CKEditor 5 dependency and some tooling around ckeditor5-core can be found here, which may be one reference: https://github.com/CoreMedia/ckeditor-plugins/tree/main/packages/ckeditor5-core-common\r\n\r\nIf you experience any issues with the typings, we recommend adding:\r\n\r\n```typescript\r\n// @ts-expect-error - Typing issue at DefinitelyTyped\r\n```\r\n\r\nor similar. This is because the typings are not always in line with the CKEditor 5 sources and/or documentation. But overall, they are quite complete and a very good start. (`@ts-expect-error` is better than `@ts-ignore` as it will inform you, once the typings got updated accordingly and may help to migrate to official typings by CKEditor later)\r\n\r\nAnd just regarding your remark:\r\n\r\n> My preferred choice, especially as it's a very active project is to use CKEditor\r\n\r\nStick to it! In our experience, it has a very well-designed architecture and I think we really stretched it to its limits."", 'author': 'mmichaelis'}, {'body': ""Really bummed out by current situation that old types dont seem to work with TS 4.9+, while the new types are not published yet (even partially). We're stuck with both older version of TS and older version of editor. Even incomplete types are better than nothing"", 'author': 'Inviz'}, {'body': '> Really bummed out by current situation that old types dont seem to work with TS 4.9+, while the new types are not published yet (even partially). We\'re stuck with both older version of TS and older version of editor. Even incomplete types are better than nothing\r\n\r\nWIth 199 files to do, don\'t hold you breath that it\'s going to get done faster.   As a new user to CKEditor, I was bummed out that combined with my limited knowledge of typescript, it didn\'t work out of the box.   As you can see above, asking a couple of questions and doing a little digging, I\'ve managed to get CKEditor 5 working on my Typescript React app.  Having watched the project for a couple of days.  I\'m really excited to be using this component, and would much prefer that the implementation is done right I\'ll deal with the technical debt of using my hack when the time comes, but right now.   I believe that the team working on this are doing a great job and I know that with a bit of patience it will be resolved ""soon""(tm)', 'author': 'colindawson'}, {'body': ""Which version of typescript do you use? I'm using the CKEditor5 with the types for about 8 months by now. The types module really really helped to get my project off the ground (we dont even use ckeditor5's own ui, it's a total overhaul), but the types package is outdated and as i mentioned does not work for 4.9/5 for us because of default exports thing, that i could not personally resolve. If you use 4.9, let me know what settings do you use and what are the import calls you do for importing individual files. I can not update TS on our project because of this.\r\n\r\nI understand that partial types are not released currently, because it would conflict with the old types package? So it's a curse and a blessing to have the old types. "", 'author': 'Inviz'}, {'body': 'I could also not get `@types/ckeditor__ckeditor5-core` to work, had to resort to creating a file very similar to the one shared by @colindawson.\r\n\r\nSadly, no simple works-out-of-the-box solution here :(', 'author': 'jacquesg'}, {'body': ""Just to be clear, whilst what I did worked. I need to use more advanced things from CKEditor, so for now, I've decided to change my editor over to using jsx files, instead of tsx.   This way, I'm avoiding typescript for the moment, with the intent to come back and refactor once the typescript version is released."", 'author': 'colindawson'}, {'body': ""We're about to finish the code migration. We should be done with both the open source and commercial code by the end of February.\r\n\r\nThe code release to npm is blocked, though, by the rest of our tooling (e.g. release scripts) that need to catch up. It's now planned for the beginning of April.\r\n\r\nBut, perhaps we could share all the typings even now without breaking anything? Like, publishing them in a temporary npm package like `@ckeditor/ckeditor5-experimental-typings`. Could those be used easily then? Having them out a month before an official release would help validating some bits of them."", 'author': 'Reinmar'}, {'body': ""That would be really grand if we could have typings earlier than that. I'd really appreciate it"", 'author': 'Inviz'}, {'body': 'Hello, what is the status of CKEditor 5 typings? Is the final release out yet?\r\nThank you', 'author': 'balean12'}, {'body': ""We've just (like an hour ago :D) published 37.0.0-alpha.0 of all open source packages of CKEditor 5.\xa0\r\n\r\nAll these packages in this specific version contains typings for the entire code available in them :tada: \r\n\r\n![](https://user-images.githubusercontent.com/156149/221578066-f92f04cf-cbf0-45c9-bca3-225142501699.png)\r\n\r\nThat's an early alpha version and naturally some things may still change. For instance, we're dealing now with TypeScript issues with generating `.d.ts` files for module augmentation. Unfortunately, publishing types for such a large ecosystem with so many weird requirements is not a trivial task.\r\n\r\nNote: We did not publish 37.0.0-alpha.0 for the commercial packages. Nor plan to publish typings for them before publishing a stable 37.0.0 version (planned for April)."", 'author': 'Reinmar'}, {'body': 'I\'ll be damned, it\'s actually working. Amazing job! I\'m finding some inconsistencies, but they are minor.\r\n\r\n1) Breaking: `selectable` in model writer is set to `Node` type, but according to docs it\'s https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_selection-Selectable.html this. So it doesnt accept position at this time.\r\n2) Breaking: `Plugin` doesnt have `.set` method (for observable props)... it used to work\r\n3) EventInfo signature seems to have been simplified from `EventInfo<doc, string>` to `EventInfo<string>`\r\n4) I could not make assignment to `Editor.builtinPlugins` to work: \r\n\r\n```  Type \'typeof import(""/Users/sitecore/Sites/feaas-components/ckeditor5/node_modules/@ckeditor/ckeditor5-link/src/autolink"")\' is not assignable to type \'PluginConstructor<Editor>\'```\r\n5) I dont use config often, but i\'m getting error on assigning `heading`. I think this is what Reinmar meant talking about module augmentation?', 'author': 'Inviz'}, {'body': '@Reinmar thank you CKEditor team!', 'author': 'Inviz'}, {'body': ""@Reinmar can we update import paths, so the types will include `.js` in paths? It is backward compatible, but this way it'll be compatible with other module resolution strategies (e.g. nodenext). At the moment i'm still stuck at 4.8 because of it. Tried everything i could."", 'author': 'Inviz'}, {'body': '@Inviz We will look into the issues you listed in your first message and get back to you soon either with an update or an explanation.\r\n\r\nCan you elaborate on your request to include `.js` in paths? Why is this necessary, and what problems are you experiencing with the current approach?', 'author': 'filipsobol'}, {'body': '@filipsobol Thanks Filip!\r\n\r\nThe issue is that `node16`+ module setting requries `.js` extensions, otherwise it can\'t find files. The symptom is that types can\'t be found for the package. It says ""type X is not exported by ckeditor5"". It\'s necessary for modern esm modules projects\r\n\r\nhttps://github.com/microsoft/TypeScript/issues/49083\r\nhttps://stackoverflow.com/questions/65873101/node-requires-file-extension-for-import-statement/65874173#65874173\r\n\r\n> This is because node.js follows the ES6 standard which forbids the interpreter from guessing filename extensions. You will also need to add file extensions if you want to use import in plain javascript in browsers.', 'author': 'Inviz'}, {'body': '@Inviz Could you please set up a small reproduction that we can use? In `alpha.2` we will make some (rather small) changes to how code from packages is imported and it would help us greatly.', 'author': 'filipsobol'}, {'body': ""> @Inviz Could you please set up a small reproduction that we can use? In `alpha.2` we will make some (rather small) changes to how code from packages is imported and it would help us greatly.\r\n\r\nI'm embarrased to say but i think i can not reproduce anymore what I tried to achieve with it. The only thing that is reliably not working is importing types from files directly like:\r\n\r\n> import type { default as ModelElement } from '@ckeditor/ckeditor5-engine/src/model/element.js'\r\n\r\nHowever doing it like:\r\n\r\n> import type { Element as ModelElement } from '@ckeditor/ckeditor5-engine'\r\n\r\nworks.  I can't figure out in which configuration did using .js extensions helped it. I'll try to use the second method of importing types (from root of the package) and see how far i go. If i stumble upon a problem, i'll update my reproduction repo (i took link away for now, as it's not super useful)"", 'author': 'Inviz'}, {'body': ""Importing directly from the root of the package is exactly the change we want to introduce in `alpha.2` (mentioned in my previous message). If you find that we don't export something you need, please let us know."", 'author': 'filipsobol'}, {'body': '* MutationObserver seems to be not exported\r\n* I wish commands were exported. UploadImageCommand/InsertTableCommand i used to extend', 'author': 'Inviz'}, {'body': 'Otherwise I managed to make it work on 4.9. I import now all types from root of packages, instead of .js files like before. Thanks!', 'author': 'Inviz'}, {'body': ""I'm glad to hear this and want to thank you for the feedback - it reassures us that we're moving in the right direction.\r\n\r\nIn the next few days, we'll be releasing `alpha.1`, which will fix issues with TypeScript complaining that some commands, plugins, and configurations are not available or unknown, even though they're registered correctly ([more details](https://github.com/ckeditor/ckeditor5/issues/13565)). In `alpha.2` we will address the issue you reported in [this comment](https://github.com/ckeditor/ckeditor5/issues/11704#issuecomment-1447942791).\r\n\r\nInternally, we are also discussing what we should export from the main package entry points, or in other words, what is our public API and what should be considered internal. Can you share why and how you use `MutationObserver` and the commands you mentioned? It will give us a better picture of what you and other developers might need for this and other packages."", 'author': 'filipsobol'}, {'body': ""@filipsobol I'm having different monkeypatches to\xa0ckeditor, like changing the logic that causes fillers to appear, etc. I'm patching `_isBogusMutation` in mutation observer to ignore mutations in certain types of custom elements. Patching domconverter to not try to change classes on root. Things like that.\r\n\r\nFor the command i include them to monkeypatch their `refresh` method. I guess i could do that during ckeditor initialization instead."", 'author': 'Inviz'}, {'body': 'Anyway you guys are really moving to right direction. Thanks for all the typescript conversion work, probably took a hell of a lot of time. I dont think many projects did it as seamlessly as you did.', 'author': 'Inviz'}, {'body': ""@Inviz Unfortunately, this is not the supported way to use the editor, and we have decided not to export the `MutationObserver` and commands from the main entry points. You can still access them as before, but you'll have to deal with potential TypeScript errors yourself.\r\n\r\nWe plan to release `alpha.1` on Monday."", 'author': 'filipsobol'}, {'body': ""> @Inviz Unfortunately, this is not the supported way to use the editor, and we have decided not to export the `MutationObserver` and commands from the main entry points. You can still access them as before, but you'll have to deal with potential TypeScript errors yourself.\r\n\r\nA bit of context here. We decided to treat the `index.ts` entry points as sort of public API of packages. That will allow us to hide some implementation details of each package or things that we expect may change, while still allowing hacking the editor or its features via a direct access to each package's `src/` (but at your own risk)."", 'author': 'Reinmar'}, {'body': ""yeah i think i can deal with that. i'm hacking it already, so i can hack the types too."", 'author': 'Inviz'}, {'body': 'The new alpha release is out: üëâ https://github.com/ckeditor/ckeditor5/releases/tag/v37.0.0-alpha.1.', 'author': 'pomek'}, {'body': 'There\'s another issue that is just quasy rellated to this:\r\n\r\nWhen using ckeditor from sources without a build, vitest (being esm-first project) complains about CK5 modules not being esm modules, although they seem to should be in its opinion. \r\n\r\n```\r\nModule /Users/sitecore/Sites/feaas-components/ckeditor5/node_modules/@ckeditor/ckeditor5-utils/src/dom/findclosestscrollableancestor.js:14 \r\nseems to be an ES Module but shipped in a CommonJS package. \r\nYou might want to create an issue to the package ""@ckeditor/ckeditor5-utils"" \r\nasking them to ship the file in .mjs extension or add ""type"": ""module"" in their package.json.\r\n```\r\n\r\nIs this something that can be resolved?\r\n', 'author': 'Inviz'}, {'body': ""Adding `type: module` into `package.json` would resolve the issue.\r\n\r\nI'm wondering if sources should be marked as ES Module too. \r\n\r\nI extracted the case to a separate issue: https://github.com/ckeditor/ckeditor5/issues/13673."", 'author': 'pomek'}, {'body': ""We have some great news for Vue developers! **We just released an alpha version of our Vue integration** that includes improved TypeScript support. We hope you'll give it a try and share your feedback to help us make sure it works well before we release a stable version. To install it, run `npm install @ckeditor/ckeditor5-vue@alpha`.\r\n\r\nWe hope to have similar news for the **React** and **Angular** folks next week."", 'author': 'filipsobol'}, {'body': '@Inviz I looked into the [issues you reported in this comment](https://github.com/ckeditor/ckeditor5/issues/11704#issuecomment-1447942791). I hope my answers below will help.\r\n\r\n---\r\n\r\n> Breaking: `selectable` in model writer is set to `Node` type, but according to docs it\'s [https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_selection-Selectable.html](https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_selection-Selectable.html) this. So it doesnt accept position at this time.\r\n\r\nThe `createSelection` in model writer has two signatures (thanks to the ‚Äúfunction overloading‚Äù). The first one expects a `Node` followed by `PlaceOrOffset`, and optional `options`. The other expects any `Selectable` except `Node` and optional `options`.\r\n\r\nYou can switch between the two definitions in your IDE using this switch:\r\n\r\n![](https://user-images.githubusercontent.com/4145208/226389128-ff1803a8-407d-488b-9818-81801eb84217.jpg)\r\n\r\n---\r\n\r\n> Breaking: Plugin doesnt have .set method (for observable props)... it used to work\r\n\r\nPlease check if you have installed the alpha version of the both `core` and `utils` packages. If you have, and it doesn\'t work as shown in the example below (or [like in this playground](https://codesandbox.io/s/misty-sound-mimii8?file=/src/index.ts)), please let us know.\r\n\r\n![](https://user-images.githubusercontent.com/4145208/226389549-1ee11888-3e35-42a2-b1a2-8951deec75c9.jpg)\r\n\r\n---\r\n\r\n> EventInfo signature seems to have been simplified from EventInfo\\<doc, string> to EventInfo\\<string>\r\n\r\nWe don\'t try to maintain compatibility with DefinitelyTyped typings, so there may be cases like this here and there. The current signature is `EventInfo<TName extends string = string, TReturn = unknown>`. The first generic defines the type of the event name, and the other defines its return type.\r\n\r\n---\r\n\r\n> I could not make assignment to Editor.builtinPlugins to work: Type \'typeof import(""/Users/sitecore/Sites/feaas-components/ckeditor5/node\\_modules/@ckeditor/ckeditor5-link/src/autolink"")\' is not assignable to type \'PluginConstructor\\<Editor>\'\r\n\r\nI remember seeing this error before we migrated all plugins to TypeScript. Please check if the `link` plugin and any other plugins you have installed are also in the alpha version. If they are and you still see the error, please let us know.\r\n\r\nI also recommend using `override` to set `builtinPlugins` or `defaultConfig`. The ""old"" way should still work fine, but the one shown below works better with TypeScript.\r\n\r\n```typescript\r\n// Before\r\nclass MyEditor extends ClassicEditor {}\r\nMyEditor.builtinPlugins = [];\r\nMyEditor.defaultConfig = {}\r\n\r\n// Now\r\nclass MyEditor extends ClassicEditor {\r\n  public static override builtinPlugins = [];\r\n  public static override defaultConfig = {};\r\n}\r\n```\r\n\r\nWe switched to the second way of defining built-in plugins because it produces better definitions (`.d.ts`), where the first approach was ignored.  \r\n  \r\n\xa0\r\n\r\n---\r\n\r\n> I dont use config often, but i\'m getting error on assigning heading. I think this is what Reinmar meant talking about module augmentation?\r\n\r\nThis is already fixed in the latest `alpha`.', 'author': 'filipsobol'}, {'body': ""@filipsobol Thanks Filip! I can confirm that using your suggestions i managed to fix all the issues I've had. Great job"", 'author': 'Inviz'}, {'body': '@filipsobol  Can it be somehow improved that we can jump from types to the code implementation? I think it would be hugely useful at least to jump to compiled js (if not ts). Right now i can only jump to the type it seems in vs code', 'author': 'Inviz'}, {'body': '@Inviz This is the default behavior of IDEs for libraries that ship definition files, so it\'s not something we can do at the library level.\r\n\r\nI don\'t know about other IDEs, but in VS Code you can right click on the element you want to jump to and select ""Go to source definition"".', 'author': 'filipsobol'}, {'body': 'Hey Filip. You are right, ""Go to source definition"" does it. For some\nreason I thought it should be ""Go to implementation"". Thanks!\n\nOn Wed, Mar 22, 2023 at 5:01\u202fPM Filip Sobol ***@***.***>\nwrote:\n\n> @Inviz <https://github.com/Inviz> This is the default behavior of IDEs\n> for libraries that ship definition files, so it\'s not something we can do\n> at the library level.\n>\n> I don\'t know about other IDEs, but in VS Code you can right click on the\n> element you want to jump to and select ""Go to source definition"".\n>\n> ‚Äî\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ckeditor/ckeditor5/issues/11704#issuecomment-1479146119>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAAAVFBKKN5ADP67RQXTXN3W5K5WVANCNFSM5VDMTC5A>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n', 'author': 'Inviz'}, {'body': 'In Alpha.1 i could not import `SelectionObserver` from the engine. I guess it could be one of those things that i shouldnt do... it may be so.', 'author': 'Inviz'}, {'body': ""> In Alpha.1 i could not import `SelectionObserver` from the engine. I guess it could be one of those things that i shouldnt do... it may be so.\r\n\r\nWhy do you need it? It's registered by default. We'll be trying to understand whether there are some cases we don't see ourselves but that are valid so we'll be asking every time :)"", 'author': 'Reinmar'}, {'body': ""**Today we released an alpha version of our React integration** that includes improved TypeScript support. We hope you'll give it a try and share your feedback to help us make sure it works well before we release a stable version. To install it, run `npm install @ckeditor/ckeditor5-react@alpha`."", 'author': 'filipsobol'}, {'body': 'Last but not least, the Angular integration has also been updated and released as an alpha for testing. To install it, run `npm install @ckeditor/ckeditor5-angular@alpha`.', 'author': 'filipsobol'}, {'body': 'Hi everyone,\r\n\r\nI am happy to announce that we have completed the migration of CKEditor5 project to TypeScript! We appreciate all the feedback that we received from the community during this process.\r\n\r\nFor those who are interested, we have documented the migration steps in our documentation ([here](https://ckeditor.com/docs/ckeditor5/latest/updating/guides/update-to-37.html)). We have also created a separate documentation on how to use CKEditor5 in TypeScript projects ([here](https://ckeditor.com/docs/ckeditor5/latest/installation/working-with-typescript.html)).\r\n\r\nWe would like to invite everyone to provide their feedback in our other ticket (#12027) where we will track our future improvements.\r\n\r\nMoving forward, we plan to update [CKEditor5 Online Builder](https://ckeditor.com/ckeditor-5/online-builder/) and [ckeditor5-package-generator](https://ckeditor.com/docs/ckeditor5/latest/framework/guides/plugins/package-generator/using-package-generator.html) to use TypeScript, make typings work with [DLLs](https://ckeditor.com/docs/ckeditor5/latest/framework/contributing/development-environment.html#building-dlls), migrate [the inspector](https://github.com/ckeditor/ckeditor5-inspector) to TS, update our Contribution Guide and other documentation to reflect that it is now a TypeScript project, and other miscellaneous stuff.\r\n\r\nThank you all for your continued support and contributions.', 'author': 'arkflpc'}, {'body': ""Event-based dispatcher dont seem to be typed? e.g. `upcastDispatcher.on('element:a', (evt, data, conversionApi) => {}` args dont have inferred types, as `on` is generic function"", 'author': 'Inviz'}, {'body': ""> Event-based dispatcher dont seem to be typed? e.g. `upcastDispatcher.on('element:a', (evt, data, conversionApi) => {}` args dont have inferred types, as `on` is generic function\r\n\r\nDid you use generic types, as can be found in many example usages in the CKEditor 5 workspace? Such as here:\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/3fc7651ef7671a0f538b4192b2f405ea21d63965/packages/ckeditor5-heading/src/title.ts#L106-L108\r\n\r\nIf not providing a generic argument, you will only have options of the `BaseEvent`:\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/3fc7651ef7671a0f538b4192b2f405ea21d63965/packages/ckeditor5-utils/src/emittermixin.ts#L77-L83\r\n"", 'author': 'mmichaelis'}, {'body': 'thanks. Is there a necessity to provide those types explicitly? It seems that typescript could infer by event name?', 'author': 'Inviz'}, {'body': '> @Inviz This is the default behavior of IDEs for libraries that ship definition files, so it\'s not something we can do at the library level.\r\n> \r\n> I don\'t know about other IDEs, but in VS Code you can right click on the element you want to jump to and select ""Go to source definition"".\r\n\r\nI\'d like to bring this up again. Right now if you ""Go to source definition"" you jump into JS file. Within that file you can jump between functions as well. but any function that is out of that file is `any`. So i can\'t navigate the codebase this way - only one way deep. Can this be improved?', 'author': 'Inviz'}, {'body': '@Inviz could you move this case to the https://github.com/ckeditor/ckeditor5/issues/12027 as this ticket is closed?', 'author': 'Witoso'}, {'body': 'Is there any demo how to upgrade from builder version of ckeditor to typescript? @arkflpc', 'author': 'abduraufsherkulov'}, {'body': 'Hi @abduraufsherkulov.\r\n\r\nCustom builds produced by the **online builder** and **DLL** versions of packages provided by CKEditor 5 do not provide built-in typings yet. We plan to provide the support for those.\r\n\r\nHowever, it is possible right now (although not straightforward): see [this comment](https://github.com/ckeditor/ckeditor5/issues/13548#issuecomment-1486284270).', 'author': 'arkflpc'}]","['type:task', 'Epic', 'domain:dx', 'squad:core', 'domain:ts', 'domain:integration-dx']",CLOSED,11704.0,"['1415', '504']"
ckeditor,ckeditor5,Migrate CKEditor 5 to TypeScript - follow-ups,"This issue serves as an umbrella for all the tasks that need to be done after migrating the project to TypeScript, including bug fixes, code refactoring, and feature enhancements.

Additionally, this issue is also a platform for the community to share their feedback and suggestions regarding the TypeScript migration.

## Tasks
- [x] https://github.com/ckeditor/ckeditor5/issues/13831
- [ ] https://github.com/ckeditor/ckeditor5/issues/13743
- [ ] https://github.com/ckeditor/ckeditor5/issues/11723
- [x] https://github.com/ckeditor/ckeditor5/issues/11888
- [x] https://github.com/ckeditor/ckeditor5/issues/13434
- [ ] https://github.com/ckeditor/ckeditor5/issues/13855
- [x] https://github.com/ckeditor/ckeditor5/issues/13830
- [x] https://github.com/ckeditor/ckeditor5/issues/13750
- [x] https://github.com/ckeditor/ckeditor5/issues/12853
- [x] https://github.com/ckeditor/ckeditor5/issues/12720
- [x] https://github.com/ckeditor/ckeditor5/issues/12763
- [x] https://github.com/ckeditor/ckeditor5/issues/12218


## Community Feedback

We encourage the community to share their feedback and suggestions regarding the TypeScript migration. If you encounter any bugs or issues related to the migration, please report them here. We value your feedback and will use it to improve the quality of the project. Thank you for your support and contribution.",arkflpc,[],"[{'body': '## Replace ""export type"" by ""export"" in index.ts\r\n\r\nWe are just at upgrading to CKEditor 37.x, thankfully being able to incorporate your TypeScript typings!\r\n\r\nWe stumbled across some ""export type"", though, in `index.ts`, where we require a full export. From discussion, our perception is, that `index.ts` is the ""declared public API"" and direct imports like from `imageinline` should be prevented ‚Äì but are the only workaround for us now.\r\n\r\nWe would require the following to be full exports instead:\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-image/src/index.ts#L37\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-image/src/index.ts#L39\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-image/src/index.ts#L40\r\n\r\nWe may provide details, why we need these. For `ImageInline`, for example, we do not support `ImageBlock`, so that we directly need to reference `ImageInline` instead of the aggregator `Image`.\r\n\r\n## Add to index.ts\r\n\r\nAnd the following, we would like to be exported in the corresponding `index.ts`:\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-core/src/commandcollection.ts#L16\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-link/src/ui/linkactionsview.ts#L27\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-link/src/ui/linkformview.ts#L42\r\n\r\nhttps://github.com/ckeditor/ckeditor5/blob/629f8ab55d75516eb8151cfc250952667d4427e6/packages/ckeditor5-editor-classic/src/classiceditoruiview.ts#L20\r\n\r\nSame as above, we may provide details, why we require them, so that we may discuss alternative paths we could take.\r\n\r\n## For Reference: Our Usages\r\n\r\nWe added a comment to our upgrade PR to reference issues reported here: https://github.com/CoreMedia/ckeditor-plugins/pull/145 (e.g., https://github.com/CoreMedia/ckeditor-plugins/pull/145/commits/55200cbf8f8567e0d24df4a021d0d0318c09ee91).\r\n\r\nSimilar to:\r\n\r\n```typescript\r\n// See ckeditor/ckeditor5#12027.\r\n```\r\n\r\nSo, you may see, for example, that we only require `CommandCollection` on integration test level. Thus, it may be completely valid to state, that it should not go into `index.ts` just for this purpose.\r\n', 'author': 'mmichaelis'}, {'body': '@mmichaelis we appreciate the feedback! We will review it here: #13864', 'author': 'Witoso'}, {'body': 'Just created another issue in this context:\r\n\r\n* #13904\r\n', 'author': 'mmichaelis'}, {'body': ""Cant find a way to import ViewTreeWalker from engine. Having to use `ReturnType<ViewPosition['getWalker']>` for now"", 'author': 'Inviz'}, {'body': ""Also please add inferred types for event listeners. It's backwards now, type has to be provided and that validates the event name. Currently, i can not import types like `ViewDocumentCopyEvent` for example to listen to event."", 'author': 'Inviz'}, {'body': ""Hi @Inviz ,\r\n\r\nI've created a ticket to provide `ViewTreeWalker` (#14158).\r\n\r\nRegarding the events: You can import `ViewDocumentCopyEvent` from ckeditor5-clipboard. I.e.\r\n\r\n```typescript\r\nimport { ViewDocumentCopyEvent } from '@ckeditor/ckeditor5-clipboard'\r\n```\r\n\r\nWe tried to provide automatic type inference for event listeners, like [lib.dom.d.ts](https://github.com/TypeStrong/tscs/blob/master/lib/node_modules/TypeScript/bin/lib.dom.d.ts) do. However, it turned out to be very difficult with the event system we have in `ckeditor5`. The option to refactor events was out-of-scope, because almost everything relies on this. If you are interested in solutions we tried, please read [this comment](https://github.com/ckeditor/ckeditor5/issues/12076#issuecomment-1191344179)."", 'author': 'arkflpc'}]","['Epic', 'squad:core', 'domain:ts']",OPEN,12027.0,"['13743', '12853', '12218', '12720', '13750', '11723', '13855', '12763', '11888', '13831', '13434', '13830']"
ckeditor,ckeditor5,[beforeInput] Bring back basic typing support in Android,"In a course of action in https://github.com/ckeditor/ckeditor5/issues/11438 we wrote a composition support for non-Android browsers (see https://github.com/ckeditor/ckeditor5/pull/12024).

Unfortunately, while it works really well on every other system and browser and every language (including CJK), it does not work on Android at all.

We need to implement a completely custom handling for Android browsers.

Keyboards that we'll try to support from day one:

* The default one
* GBoard
* Swift

## ToC

* PoC ([done](https://github.com/ckeditor/ckeditor5/issues/12058#issuecomment-1220904956) ‚úÖ )
* And then stabilize:
  * #12391
  * #12369
  * #12368",Reinmar,['niegowski'],"[{'body': ""Let's try to approach this in 3 stages:\r\n\r\n1.  Research events fired by Android keyboards. See: [https://www.notion.so/Typing-events-scenarios-8d750fcdc8984e4fa5126e78b98e4047.](https://www.notion.so/Typing-events-scenarios-8d750fcdc8984e4fa5126e78b98e4047.)\r\n    *   The goal is to compile a event model common across all major Android keyboards and identify the most important quirks.\r\n2.  Try recreating minimal support for typing on Android to unblock releasing the work done in #12024. It can be really incomplete as long as it does not crash. Release this minimal support together with the entire #12024 as soon as possible.\r\n3.  Take time to figure out a more complete implementation and finally close the IME&beforeInput topic for real. The last step may take significantly longer than step 2, hence it's separated."", 'author': 'Reinmar'}, {'body': ""The main differences for Android IME (typing with an English keyboard):\r\n\r\n1.  every time composition is replacing the whole word (even if only some characters were added or removed)\r\n2.  it keeps active composition while changing the selection between words in the document\r\n3.  there is no target ranges in the composition `beforeinput` events instead it's manipulating the DOM selection to reflect the text part that should be affected by the input\r\n\r\n### Emulate desktop IME behavior (the first attempt to solve those issues)\r\n\r\nTrying to keep as much of the original IME handling as possible and try to work around the issues mentioned above.\r\n\r\n_Note: Renderer and selection observer were disabled while in the composition state (from the editor's point of view)._\r\n\r\n1.  the `insertText` event was triggered on the composition end (no matter if the real one or the fake one)\r\n    *   the content and affected range were accumulated on `beforeinput` composition events\r\n    *   while committing the composition the text affected by the composition was compared with the one in the composition event and only differences were fired in the event (to prevent striping text node attributes while replacing the text node)\r\n2.  monitoring the selection changes to verify if it's still composing the same word or if it moved to some other place\r\n    *   in such case detected it was triggering false composition end\r\n    *   the composition (editor state) was restarted on the first composition event after that\r\n3.  for the affected range, the DOM selection is used\r\n\r\nThis approach caused problems with DOM - View position mapping because of the disabled renderer and the fact that the browser is wrapping some text with links or bold etc. There were some other problems that I can't recall now but maybe we should try to check it again.\r\n\r\n### Trying to ignore composition and just use the `beforeinput` composition events\r\n\r\nThis idea was to not ignore `insertCompositionText` type of `beforeinput` event so that every change would get applied to the model and view immediatelly so in theory there should not be problems with the position mapping.\r\n\r\n1.  the `insertText` event is triggered on every `insertCompositionText`\xa0\r\n    *   the text affected by the composition was compared with the one in the composition event and only differences were fired in the event (to prevent striping text node attributes while replacing the text node)\r\n2.  this approach completely ignores the `isComposing` flag, renderer is not disabled\r\n3.  for the affected range, the DOM selection is used (as in the previous attempt)\r\n\r\nUnfortunately, this approach also had issues with non-English keyboards because it broke the composition even harder than on the master branch. It was enough to compose in plain text to get the composition broken.\r\n\r\n### Rendering only if some document structure was changed (not text)\r\n\r\nThis is an extension of the previous attempt that is trying to trigger render in cases where some text node needs to get wrapped with some inline element (for example link or some bold etc). This would allow composing in plain text context but would still break composition while typing inside a link (same as on master).\r\n\r\nWhile trying to detect whether render should update DOM I noticed that current `beforeinput` handling is marking the whole container element as modified and the renderer is replacing the whole DOM text node instead of modifying its content. This might be the case of broken composition with non-English keyboards. I need to research it more to find out if we could fix the rendering so that it would not replace text nodes but update those modified. This would also affect desktop browsers because this bug of replacing the whole node is also affecting them."", 'author': 'niegowski'}, {'body': ""After expanding `Renderer#_updateChildren()` to be able to detect text node changes and update text nodes instead of replacing them I realized that this is still not enough because this whole flow is triggered on `beforeinput` so the text typed by the user is not yet in the DOM and since composition events can't be stopped this breaks composition.\xa0\r\n\r\nThe idea to solve the above problem:\r\n\r\n*   ~the renderer should be disabled while composing (even on android)~\xa0  \r\n    only updating text nodes should be disabled while composing\r\n*   ~on every `compositionupdate` event, the renderer should be triggered~  \r\n    the renderer is triggered after every change in DOM by the MutationObserver  \r\n    *   if it was correct and matches the view then the renderer does not change anything\r\n    *   if it should be wrapped with a link or moved outside it then it fixes it and this breaks composition the same as on typing based on mutations (master)"", 'author': 'niegowski'}, {'body': ""PoC branch: [https://github.com/ckeditor/ckeditor5/compare/ck/epic/11438-migrate-to-beforeinput...ck/11438-beforeinput-ime-research-vol1.1-android](https://github.com/ckeditor/ckeditor5/compare/ck/epic/11438-migrate-to-beforeinput...ck/11438-beforeinput-ime-research-vol1.1-android)\r\n\r\nSome problems with partial solutions:\r\n\r\n1.  Replacing \xa0misspelled words by picking the correct version from the dropdown was not rendered\r\n    *   This was caused by the fact that DOM text nodes were not updated while the `isComposing` flag is set\r\n    *   The `beforeinput` event got prevented (`insertReplacementText` is not a composition event, so it can be prevented)\r\n    *   The solution to this issue was to `preventDefault()` only those before input events that got triggered while not composing\r\n2.  Backspace and deleting content was causing an inline filler to get reduced to 6 characters (and considered lost)\r\n    *   This was caused by the fact that on Android the `deleteContentBackward` is ignoring `preventDefault()`\r\n    *   The selection after a link was just after an inline filler so the last character of it got removed by the browser\r\n    *   There is a workaround in the above PoC branch that does not use inline filler on android if there is any node on any side of the caret\r\n        *   This fixes the backspace problem\r\n        *   This sometimes causes that typing after a link is not possible (content jumps into the link)\r\n            *   This needs more checking\r\n        *   Inline filler is still rendered in an empty inline element to make it possible to type inside a `strong` element etc.\r\n3.  Pressing enter key does not trigger proper `beforeinput` event on some devices, instead it triggers `insertCompositionText` with data: `test\\n`\r\n    1.  I wasn't able to reproduce it so no solution for now\r\n4.  Composing after an English word by using the SwiftKey keyboard and trying to compose in Japanese causes the whole word to change to Japanese characters\r\n    1.  The same is happening in a plain content-editable so this is probably out of the scope"", 'author': 'niegowski'}, {'body': ""> Pressing enter key does not trigger proper `beforeinput` event on some devices, instead it triggers `insertCompositionText` with data: `test\\n`\r\n> \r\n> 1.  I wasn't able to reproduce it so no solution for now\r\n\r\nThat sounds like ckeditor/ckeditor5#11906."", 'author': 'Reinmar'}, {'body': ""@ckeditor/qa-team I think it's worth retesting the whole thing on Android.\r\n\r\nThe branch to test is [ck/11438-beforeinput-ime-research-vol1.1-android](https://github.com/ckeditor/ckeditor5/compare/ck/epic/11438-migrate-to-beforeinput...ck/11438-beforeinput-ime-research-vol1.1-android).\r\n\r\nKeyboards to cover:\r\n\r\n*   Default\r\n*   GBoard\r\n*   Swift\r\n\r\nLanguages:\r\n\r\n*   English\r\n*   One of Japanese layouts\r\n\r\nNote: Make sure to test on the newest Chrome as something changed recently. Also, we had problems setting up a simulator with all 3 keyboards. Together with @niegowski we were following this guide: [https://www.notion.so/Setting-up-Android-Emulator-9708664ec48e429686ab587bb1167c8a](https://www.notion.so/Setting-up-Android-Emulator-9708664ec48e429686ab587bb1167c8a) but at different moments and I ended up having 3 keyboards to choose from while Kuba just 2. We didn't figure this out and each of us tested what we could.\r\n\r\nOne additional favor I'd like to ask you: Could you also review (and close if not reproducible anymore) the issues reported specifically for the previous attempt to resolve Android issues? The list: https://github.com/ckeditor/ckeditor5/issues?q=is%3Aissue+is%3Aopen+ck%2F11438-beforeinput-ime-research-vol1.2-android"", 'author': 'Reinmar'}, {'body': ""Remaining issues to cover now:\r\n\r\n*   Merge latest `master` to this branch.\r\n*   Let's try to fix [https://github.com/ckeditor/ckeditor5/issues/12058#issuecomment-1221984375](https://github.com/ckeditor/ckeditor5/issues/12058#issuecomment-1221984375) + ckeditor/ckeditor5#12368 assuming they are the same problem. Let's simply add support for `beforeInput:insertText` with `'\\n'` and see if they go away. It should certainly resolve ckeditor/ckeditor5#11906. It may resolve #2045 too.\r\n*   Let's investigate ckeditor/ckeditor5#12369. Is our hypothesis correct? Can we detect and skip this particular `compositionstart`?"", 'author': 'Reinmar'}, {'body': 'Closed in #12446.', 'author': 'niegowski'}]","['type:task', 'domain:typing/ime', 'Epic', 'squad:core']",CLOSED,12058.0,"['12058', '11438']"
ckeditor,ckeditor5,Improve editor initialization time (scenarios with empty content),"## üìù Provide a description of the improvement

There are scenarios in which people initialize an empty editor (no content). With typical setups the performance is acceptable, but we noticed room for visible improvements during our initial research.

Let's dive deeper into this scenario.

TODO:

- [x] https://github.com/ckeditor/ckeditor5/issues/12682
- [x] https://github.com/ckeditor/ckeditor5/issues/12890

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Mgsy,[],"[{'body': 'The improvement should be for inline editor and multi-root editor', 'author': 'cmak9149'}]","['type:improvement', 'package:ui', 'support:2', 'Epic', 'type:performance', 'squad:core']",CLOSED,12592.0,"['12890', '12682']"
ckeditor,ckeditor5,Drag and Drop of blocks,"Currently, CKEditor 5 allows dragging textual content and objects (like images or tables). Such content can be then dropped at any possible caret position. It allows the rearranging of parts of the content without cutting and pasting them. It‚Äôs a feature implemented by all rich text editors for decades.

However, the ‚Äúinline‚Äù mode of this feature does not enable the user to quickly and efficiently rearrange content blocks (e.g. paragraphs, headings, list items, images, or tables). Therefore, modern content authoring tools such as Notion popularized a block-based drag-and-drop functionality. In such implementations, entire content blocks can be easily grabbed and moved up/down in the document.

We plan to introduce a block-based drag-and-drop functionality to CKEditor 5 to boost content creators‚Äô productivity and ‚Äúmodernize‚Äù the UX of the editor.

### Experiment 
- [x] #14033

### Stabilizing

The stabilization efforts will consist of bug fixing as well as adding a few new behaviors if the time frame allows.

#### Bug fixing
- [x] https://github.com/ckeditor/ckeditor5/issues/14968
- [x] https://github.com/ckeditor/ckeditor5/issues/14740
- [x] https://github.com/ckeditor/ckeditor5/issues/14710
- [x] https://github.com/ckeditor/ckeditor5/issues/14640
- [x] https://github.com/ckeditor/ckeditor5/issues/11130
- [x] https://github.com/ckeditor/ckeditor5/issues/14709
- [x] https://github.com/ckeditor/ckeditor5/issues/15029


#### New behaviors
- [x] https://github.com/ckeditor/ckeditor5/issues/14645
- [x] https://github.com/ckeditor/ckeditor5/issues/14744
- [x] https://github.com/ckeditor/ckeditor5/issues/14646
- [x] https://github.com/ckeditor/ckeditor5/issues/14969


#### Enablement
- [x] https://github.com/ckeditor/ckeditor5/issues/14734
- [x] https://github.com/ckeditor/ckeditor5/issues/14831

### Community feedback
- [x] #2664
- [x] #12894

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.
",Witoso,[],"[{'body': 'Further enhancements extracted to the #15110.', 'author': 'Witoso'}]","['domain:ui/ux', 'Epic', 'squad:core']",CLOSED,13933.0,"['14734', '14709', '2664', '11130', '14831', '14744', '14640', '14646', '14710', '14033', '14969', '14968', '15029', '14645', '14740', '12894']"
ckeditor,ckeditor5,"Support adjacent lists (splitting, resetting numbering)","## Use cases
As a user, I want to insert content (paste/import) that has two or more lists of the same type one after the other, and I want the editor to preserve this markup.

We don‚Äôt want to break the good UX of the lists. You rarely want to type in the editor two lists of the same type without indentation etc. That‚Äôs why we shouldn‚Äôt degrade the UX of the current solution. The editor will accept such data via Source, pasting, import but it will not be possible to type such lists. The problem may appear when someone by mistake deletes such lists (undo should work) or wants to tweak them.


## Scope
* When pasting content that has adjacent lists of the same time in the HTML markup, we preserve those to lists.
  * Paste from office.
  * Source editing.
* Documentation refresh.


## Out of scope
* Ability to type/create such lists from the UI.
* Handling this case in the basic Lists plugin. This will only be handled in the Document lists plugin.
* Nested `<ol>`'s that created nested lists.
  ``` html
  <ol style=""margin-top:0in"" start=""1"" type=""1"">
    <li class=""MsoNormal"" style=""color:#4E444A;vertical-align:middle""><span style=""font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif"">Item</span></li>
  </ol>

  <ol style=""margin-top:0in"" start=""1"" type=""1"">
    <ol style=""margin-top:0in"" start=""1"" type=""a"">
      <li class=""MsoNormal"" style=""color:#4E444A;vertical-align:middle""><span style=""font-size:11.0pt;font-family:&quot;Calibri&quot;,sans-serif"">Subitem</span></li>
    </ol>
  </ol>
  ```


## Other thoughts
* this should not be set by default. It should be enabled by some configuration or something similar.

## Tasks
- [x] #12738 

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.
",Witoso,[],"[{'body': 'Example #1\r\n```html\r\n<p>\r\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis semper lacinia\r\n  metus et blandit. Morbi sed enim et dolor tincidunt ultricies non vel mi.\r\n  Proin elementum sapien sit amet magna volutpat, nec cursus odio euismod.\r\n  Suspendisse potenti. Nullam urna dolor, luctus in lectus ut, ultrices luctus\r\n  ex. Vivamus sit amet eros nisl. Aliquam erat volutpat. Etiam fermentum mi vel\r\n  congue mollis. Fusce blandit sem ut erat elementum gravida. Vivamus lorem\r\n  diam, porta eu sodales sed, auctor ut dui..\r\n</p>\r\n<p>Lorem ipsum dolor sit amet, co.</p>\r\n<p>WITNESSETH:</p>\r\n<ol style=""list-style-type: upper-latin"">\r\n  <li><p>Lorem ipsum dolor sit amet, co</p></li>\r\n  <li><p>WHEREAS, Lorem ipsum dolor sit amet, co</p></li>\r\n  <li><p>WHEREAS, Lorem ipsum dolor sit amet, co.</p></li>\r\n</ol>\r\n<p><strong>Lorem ipsum dolor sit amet, co:</strong></p>\r\n<ol style=""list-style-type: decimal"">\r\n  <li><p>SAMPLE 1</p></li>\r\n</ol>\r\n<ol style=""list-style-type: lower-latin"">\r\n  <li><p>Lorem ipsum dolor sit amet, coLorem ipsum dolor sit amet, co</p></li>\r\n</ol>\r\n<ol start=""2"" style=""list-style-type: decimal"">\r\n  <li><p>BASIC SERVICES</p></li>\r\n</ol>\r\n<ol style=""list-style-type: lower-latin"">\r\n  <li>\r\n    <p>\r\n      Lorem ipsum dolor sit amet, co\xa0<strong>(\'Services\')</strong>\xa0Lorem ipsum\r\n      dolor sit amet, co\r\n    </p>\r\n  </li>\r\n</ol>\r\n<ol start=""3"" style=""list-style-type: decimal"">\r\n  <li><p>Sample3</p></li>\r\n</ol>\r\n```', 'author': 'Witoso'}, {'body': 'Example #2\r\n```html\r\n<p class=""MsoNormal""><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New Roman""""> Lorem ipsum dolor sit amet, consectetur adipiscing elit.: <o:p></o:p></span></p>\r\n<p class=""MsoNormal"" style=""margin-left:18.0pt""><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New\r\n        Roman""""></span></p>\r\n<ol>\r\n    <li class=""MsoListParagraphCxSpFirst""\r\n        style=""margin-left:18.0pt;mso-add-space:auto;mso-list:l3 level1 lfo1;text-indent:-18.0pt""><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:Calibri""></span><span lang=""EN-US"">The </span><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:"" Times New Roman"""">Redacted</span><span lang=""EN-US""> </span><span\r\n            lang=""EN-US"" style=""mso-fareast-font-family:"" Times New Roman"""">Redacted</span><span lang=""EN-US""> Lorem ipsum dolor sit amet, consectetur adipiscing elit. </span><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New\r\n            Roman"""">Redacted</span><span lang=""EN-US"">. <o:p></o:p></span></li>\r\n</ol>\r\n<p class=""MsoListParagraphCxSpMiddle"" style=""margin-left:18.0pt;mso-add-space:auto""><span lang=""EN-US""></span></p>\r\n<ol style=""list-style-type:lower-alpha"">\r\n    <li class=""MsoListParagraphCxSpMiddle""\r\n        style=""margin-left:54.0pt;mso-add-space:auto;mso-list:l1 level1 lfo2;text-indent:-18.0pt""><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:Calibri""></span><span lang=""EN-US"">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New Roman"""">Redacted</span><span\r\n            lang=""EN-US"">, Lorem ipsum dolor sit amet, consectetur adipiscing elit.<o:p></o:p></span></li>\r\n    <li class=""MsoListParagraphCxSpMiddle""\r\n        style=""margin-left:54.0pt;mso-add-space:auto;mso-list:l1 level1 lfo2;text-indent:-18.0pt""><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:Calibri""></span><span lang=""EN-US"">Lorem ipsum dolor sit amet, consectetur adipiscing elit. </span><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New\r\n            Roman"""">Redacted</span><span lang=""EN-US"">, Lorem ipsum dolor sit amet, consectetur adipiscing elit.<o:p></o:p></span></li>\r\n</ol>\r\n<ol>\r\n    <li class=""MsoListParagraphCxSpMiddle""\r\n        style=""margin-left:18.0pt;mso-add-space:auto;mso-list:l3 level1 lfo1;text-indent:-18.0pt""><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:Calibri""></span><span lang=""EN-US"">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:"" Times New Roman"""">Redacted Redacted</span><span lang=""EN-US""> Lorem ipsum dolor sit amet, consectetur adipiscing elit.<o:p></o:p></span></li>\r\n    <li class=""MsoListParagraphCxSpMiddle""\r\n        style=""margin-left:18.0pt;mso-add-space:auto;mso-list:l3 level1 lfo1;text-indent:-18.0pt""><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:Calibri""></span><b style=""mso-bidi-font-weight:normal""><span lang=""EN-US""\r\n                style=""mso-fareast-font-family:"" Times New Roman"""">Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n                (R)</span></b><span lang=""EN-US"" style=""mso-fareast-font-family:"" Times New Roman"""">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><span lang=""EN-US""> </span><span lang=""EN-US""\r\n            style=""mso-fareast-font-family:"" Times New Roman"""">Redacted</span><span lang=""EN-US""> </span><span\r\n            lang=""EN-US"" style=""mso-fareast-font-family:"" Times New Roman"""">will:<o:p></o:p></span></li>\r\n</ol>\r\n```', 'author': 'Witoso'}, {'body': ""If we go this way, a lot of current cases need to be written, e.g. when we want to join them and not.\r\n1. If we load a list for all `ol`/`ul` we need to have separate id's (model's attribute).\r\n2. If we remove something between lists of the same type, they should merge.\r\n3. If we change the block before/after lists to a list item, the lists should merge.\r\n4. (indet/outdent logic).\r\n5. ...and more...\r\n"", 'author': 'Witoso'}, {'body': 'TBD: List separator idea.\r\n\r\nThe visual separator as a block widget, shown on the UI, between lists. No UI option for adding it.\r\n', 'author': 'Witoso'}, {'body': 'We implemented a list separator in the model via the `AdjacentListsSupport` plugin (opt-in).', 'author': 'Witoso'}]","['type:improvement', 'package:list', 'Epic', 'squad:core']",CLOSED,13945.0,['12738']
ckeditor,ckeditor5,üñºÔ∏è  Supporting image height attribute,"# Image feature compatibility with CKEditor 4 (height)

**[UPDATE]**

### Please test things out if you can, the more feedback and eyeballs we get, the more confident we will be that the implementation is correct.

This feature hit the `master` branch and is available on nightly releases and [nightly docs](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/examples/builds-custom/full-featured-editor.html) to test.

[The details of the changes are described in the comment below.
](https://github.com/ckeditor/ckeditor5/issues/14146#issuecomment-1632607316)

<details>
  <summary>Archive of discovery</summary>

## Main problem statements

When implementing images it looks like there are still some areas in which CKEditor 5 lags behind the CKE4. This applies only to inline images because CKEditor 4‚Äôs `image` plugin could only generate inline images. We don‚Äôt have to care about the behavior of `image2` (low popularity).

After initial research, it looks like the main missing attribute is height, and the following problems need to be solved.

1. How to preserve the image‚Äôs height and width with **the content that is already out there** and is loaded to the editor.
2. Should **we eagerly set image height and width** as it will produce better rendering? What about:
    1. the resizing implementation?
    2. should we set those values proactively when uploading of the image happens?

## Feedback and Community

- This is very important for modern browsers as height and width [prevent layout shifts and improve the experience of your site visitors.](https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/)
- We have reports from Drupal about missing `height` and its relation to image resizing.
    - [https://www.drupal.org/project/drupal/issues/3336446#comment-14888366](https://www.drupal.org/project/drupal/issues/3336446#comment-14888366)
    - [https://www.drupal.org/project/drupal/issues/3321296](https://www.drupal.org/project/drupal/issues/3321296)
    - When the image is resized in CKEditor 4, both¬†`height`¬†and¬†`width`¬†attributes are added. The attributes persist if the text format is upgraded to use CKEditor 5.
- https://github.com/ckeditor/ckeditor5/issues/5154
- https://github.com/ckeditor/ckeditor5/issues/10838
- https://github.com/ckeditor/ckeditor5/issues/11393

### FYI

The¬†`srcset`¬†attribute specifies the image variants dedicated for the various screen sizes for the web browser to choose from (360px, 720px, 1080px, 1440px, etc.). For instance, the¬†`image.jpg`¬†file uploaded by the user will have the following markup:

`sizes`One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:
1. A¬†[media condition](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#syntax). This must be omitted for the last item in the list.
2. A source size value.
Media Conditions describe properties of the¬†*viewport*, not of the¬†*image*. For example,¬†`(max-height: 500px) 1000px`¬†proposes to use a source of 1000px width, if the¬†*viewport*¬†is not higher than 500px.

If the¬†`srcset`¬†attribute uses width descriptors, the¬†`sizes`¬†attribute must also be present, or the¬†`srcset`¬†itself will be ignored.

CKEditor5 when **using responsive image** (EasyImage) the `width` attribute is set but not the `height`. CKBox is not doing it.

Good explanation of the impact to `width` and `height` on CLS: [https://www.aleksandrhovhannisyan.com/blog/setting-width-and-height-on-images/](https://www.aleksandrhovhannisyan.com/blog/setting-width-and-height-on-images/)

> Essentially, the width and height attributes are meant for¬†**initializing an image‚Äôs aspect ratio**, not for dictating the width and height at which it renders‚Äîthat‚Äôs the job of CSS. Once an image has loaded in, if you want to apply some custom CSS to size it differently, you can do so without changing the image‚Äôs intrinsic aspect ratio sizing.

## Use cases

Problem 1: I have HTML with `width` and `height` set and it doesn't load to the editor.
Outcome: Load the width and height attributes of the image, e.g. setData content to the model (no GHS).

---

Problem 2: When I resized an image (with `width` and `height`), and I have the resized image placed on the page there should not be a layout shift. Also, I still want to resize with **the aspect ratio locked**.
Outcome: `width` and `height` stay but the image is resized with the aspect ratio intact.

---

Problem 3: When I insert images, I want `width` and `height` set automatically.
Outcome: After upload those attributes appear on the image element.


## Scope

* [x] https://github.com/ckeditor/ckeditor5/issues/14147
* [x] https://github.com/ckeditor/ckeditor5/issues/14313
* [x] #14201 (solving problems 1 and 2)
* [x] #14202 (solving problem 3)
* [x] https://github.com/ckeditor/ckeditor5/issues/14357
* [x] https://github.com/ckeditor/ckeditor5/issues/14366
* [x] https://github.com/ckeditor/ckeditor5/issues/14542
* [x] https://github.com/ckeditor/ckeditor5/issues/14532
* [x] https://github.com/ckeditor/ckeditor5/issues/14557
* [x] https://github.com/ckeditor/ckeditor5/issues/14531

## Out of scope

Problem 4: As a user, I want to change the `width` and `height` attributes.
Outcome: `width` and `height` attributes are configurable on the UI.

Decided to keep it out of scope for now. `width` and `height` should set the [intrinsic size of the image](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#supported_image_formats) to lock the aspect ratio for the browser, and restyling of images should be done via the CSS. 
</details>
",Witoso,['mmotyczynska'],"[{'body': 'Questions:\n* non intuitive when setting only `height`.\n* `height: auto` collides with a set height in the content.\n* Should there be a config option that turns it off?\n* Where to put it in the docs?', 'author': 'Witoso'}, {'body': ""We decided that we will set those attributes on upload by default as the most content-friendly option.\r\n\r\nHowever, research needs to be conducted on how the proposed solution will behave in a variety of content sources. This initiative is a hit or miss as we cannot roll back easily. CKEditor 4 output data, and Drupal's content, as well as users' intent preservation, need to be taken into account. One of the challenges is resizing in CKE4 by tweaking the aspect ratio of the original image.\r\n\r\nTracking in: https://github.com/ckeditor/ckeditor5/issues/14313"", 'author': 'Witoso'}, {'body': ""We want to share what's our approach to this topic so far and what are the changes that will. We will not share yet detailed rational why some decisions were made, as we plan to write everything down after we complete all tasks and cover the edge cases.\r\n\r\nThe brief summary of the context and decisions:\r\n\r\n*   We intend to support `height` and `width` attributes as it produces good quality content:\r\n    *   Those attributes **will be set automatically on the upload step**.\r\n    *   We will not change already existing content, loading HTML (i.e., `setData`) with images will not set up those attributes.\r\n    *   Changes to an image (e.g., resize) will trigger creation of those attributes. We decided that those attributes are crucial, and actions on a current image that doesn't have them, should improve this image's markup.\r\n*   We need to support as much as possible the user intents, especially from the content that was produced in the CKEditor 4.\r\n    *   In CKE4, it was possible to tweak the aspect-ratio of an image. We decided to support this in the editor, and if the aspect-ratio was changed, we should show it as changed.\r\n*   We don't introduce now the options to set `width` and `height` via the editor's UI or a resize with unlocked aspect-ratio. Mostly due to the complexities of the changes so far, we try not to introduce a scope creep.\r\n\r\nThis is a very complex, and multidimensional change as the scenarios and different configs create a very challenging matrix of behaviors and effects. We spent a lot of time on this, and we are close to the finish line.\r\n\r\nThe changes can be tested on the `ck/epic/14146-support-image-height-attribute` branch. A special manual test was created to reflect different scenarios, \\`[imagesizeattributesallcases.html](http://localhost:8125/ckeditor5-image/tests/manual/imagesizeattributesallcases.html) (launched by the `yarn manual -sw -f 'image'`).  \r\n  \r\nPlease test things out if you can, the more feedback and eyeballs we get, the more confident we will be that the implementation is correct.\r\n\r\n_What follows below is a detailed explanation of what changes in the editor's model, and pipelines. If you're not integrating deeply with our images, you can skip this section._\r\n\r\n### Image styles/attributes vs. model attributes\r\n\r\n*   Style `width` ‚Üí model `resizedWidth` (changed from `width`).\r\n*   Style `height` ‚Üí model `resizedHeight` (new).\r\n*   Attribute `width` ‚Üí model `width` (new).\r\n*   Attribute `height` ‚Üí model `height` (new).\r\n\r\n### Upcast:\r\n\r\n*   **Style** `width` & `height` set (in px) ‚Üí upcast to `width` & `height` (because styles override width and height attributes).\r\n*   Else if **attributes** `width` & `height` set ‚Üí upcast to `width` & `height`\r\n*   Only **style** `width` set (% or px) ‚Üí upcast to `resizedWidth`\r\n*   **Style** `width` & `height` set (in %)\r\n    *   set `resizedHeight`, but remove when resizing.\r\n*   **Style** `height` only (in %)\r\n    *   set `resizedHeight`, but remove when resizing.\r\n*   Style `height` only (in px)\r\n    *   set `resizedHeight`, but remove when resizing.\r\n\r\n### Editing downcast:\r\n\r\n*   Resizing in % ‚Üí set `resizedWidth`.\r\n*   Resizing in px ‚Üí set `resizedWidth`.\r\n*   If `resizedHeight` was set in data ‚Üí remove it while resizing.\r\n    *   So, we don‚Äôt break how resizing in CKE5 works right now (keeping the aspect ratio).\r\n*   Height: auto (in content styles) (for `<img>`):\r\n    *   **Inline**\r\n        *   set for all.\r\n    *   **Block**\r\n        *   set for all.\r\n*   Aspect-ratio **inline style** (for `<img>`):\r\n    *   **Inline**\r\n        *   set for all.\r\n    *   **Block**\r\n        *   set for all.\r\n\r\n### Data downcast:\r\n\r\n*   Height: auto (for `<img>`):\r\n    *   **Inline**\r\n        *   needed for resized images only (class `image_resized` on `<img>`)\r\n        *   we set it for resized only\r\n    *   **block**\r\n        *   set for all\r\n*   Aspect-ratio style (for `<img>`):\r\n    *   **Inline**\r\n        *   needed for resized images with broken aspect ratio only (otherwise height:auto style resets aspect ratio to proportional sizes).\r\n        *   we set it for resized only.\r\n    *   **Block**\r\n        *   set for all."", 'author': 'Witoso'}, {'body': ""> In CKE4, it was possible to tweak the aspect-ratio of an image. We decided to support this in the editor, and if the aspect-ratio was changed, we should show it as changed.\r\n\r\nIIRC we had previously concluded that this was very rarely used? Am I now misremembering that? ü§î Asking because this this complicates the implementation enormously.\r\nChecking ‚Ä¶ found it: [the `image2` demo](https://ckeditor.com/docs/ckeditor4/latest/examples/image2.html) clearly shows that there's no ability to customize the aspect ratio?\r\n\r\nPinged @lauriii to analyze/respond in detail, because I'm not sure yet how all of the above applies to Drupal's `DrupalImage` plugin which extends CKEditor 5's own `ImageInsertUI` and `ImageUpload` ‚Äî to _never_ generate `style` attributes but `width` instead."", 'author': 'wimleers'}, {'body': ""Unfortunately, it may be a rare case the case in Drupal which, I think, didn't implement the modal. In the plain CKE4, double-click on an image showed the dimensions, with a pretty obvious mechanism to unlock the aspect ratio.\r\n\r\n![](https://github.com/ckeditor/ckeditor5/assets/9881379/831a099b-0318-4951-b429-79a66f6257d1)"", 'author': 'Witoso'}, {'body': 'This feature hit the `master` and is available on [nightly releases](https://github.com/ckeditor/ckeditor5/issues/14724) and [nightly docs](https://ckeditor5.github.io/docs/nightly/ckeditor5/latest/examples/builds-custom/full-featured-editor.html) to test.', 'author': 'Witoso'}, {'body': 'Nice, thank you!', 'author': 'KlemenDEV'}, {'body': 'Setting the width/height via the UI: https://github.com/ckeditor/ckeditor5/issues/15044.\r\n', 'author': 'Witoso'}]","['package:image', 'domain:ui/ux', 'Epic', 'squad:core']",CLOSED,14146.0,"['14202', '14146', '11393', '14366', '14357', '5154', '14531', '14201', '14147', '14542', '14557', '14313', '10838', '14532']"
ckeditor,ckeditor5,[Style dropdown] Improvements,"Improvements to our [Styles plugin](https://ckeditor.com/docs/ckeditor5/latest/features/style.html):

**Retention of styles**

*   [x] #14216
*   [x] #11591
*   [x] #11606
*   [ ] #12777

**Support for elements**
*   [x] #13341
*   [x] #11577
*   [ ] #12625
*   [ ] #13778

**UX**
* [ ] https://github.com/ckeditor/ckeditor5/issues/14372
* [ ] #11579
*   [ ] #12770
*   [ ] #12771
*   [ ] https://github.com/ckeditor/ckeditor5/issues/14946
",Witoso,[],"[{'body': ""Drupal uses the official `Image` plugin, but also has its own `DrupalMedia` plugin. This also uses a (block) widget.\r\n\r\nWhat would allow `Style` to work for _widgets_? Because that is hard-blocking https://www.drupal.org/project/drupal/issues/3117172. I thought #11577 was the issue to watch, but it was closed 4 days ago: https://github.com/ckeditor/ckeditor5/issues/11577#issuecomment-1740794667. I'm confused üòÖ "", 'author': 'wimleers'}, {'body': ""Thanks! Allow me to share more comments on this (@Reinmar or @niegowski feel free to share yours). The original issue was too generic, and it lacked the very specific detail that should have been there: support for the _current_ block widgets of the editor (tables, lists, etc.). Most of those were implemented, hence the closing.  \r\n  \r\nStyle dropdown \\[SD\\] operates on HTML alongside the GHS plugin. We cannot make it generic in a way, that it works with all widgets by default. Widgets are a layer SD isn't concerned about.\r\n\r\nWhat we need to do is to make SD aware how it should integrate with certain features (and their HTML). That's why we need more specific feedback, which features lack such behavior.\r\n\r\nAnd then, there are tricky parts. Images have their [styling implementation](https://ckeditor.com/docs/ckeditor5/latest/features/images/images-styles.html). Should we duplicate it? Combine it with SD? Those are questions we don't have answers to yet.\r\n\r\n> Drupal uses the official `Image` plugin, but also has its own `DrupalMedia` plugin. This also uses a (block) widget.\r\n\r\n@niegowski any ideas how this could be done?"", 'author': 'Witoso'}, {'body': '> **Most** of those were implemented, hence the closing.\r\n\r\nMost (table, list), but not all. `Image` in particular is very often requested.\r\n\r\n> Images have their [styling implementation](https://ckeditor.com/docs/ckeditor5/latest/features/images/images-styles.html). Should we duplicate it? Combine it with SD? Those are questions we don\'t have answers to yet.\r\n\r\nAhhh! This is why `Image` is not supported!\r\n\r\n`ImageStyle` does _far more_ than just adding a `class` attribute. AFAICT the only desire is the ability to add a `class` attribute, _without_ changing from block to inline or vice versa. So, I think this approach would make sense:\r\n1. `ImageStyle` continues to work as it does today\r\n2. `Style` plugin gains the ability to _add_ a `class` attribute value to a selected image.\r\n3. For example, say we define a ""Vintage photo"" (class name: `vintage`) style for `<img>`, which applies [some CSS to do filtering](https://dev.to/debadeepsen/vintage-photo-effect-with-css-16oj).\r\n4. If I select a right-aligned image (`alignBlockRight`) and click the ""Vintage photo"" style, it would _add_ to the existing `<img class=""image-style-align-block-right"">` and hence change it to `<img class=""image-style-align-block-right vintage"">`\r\n6. Upon removing a style: same thing.\r\n\r\nIOW:\r\n- ""image style"" is for image positioning, size, etc. These are all _deeply_ tied to the image and hence appear on the image balloon only.\r\n- `Style` for an `<img>` is for adding `class`es, just like for all other elements, and is virtually always _presentational_.\r\n\r\n> We cannot make it generic in a way [‚Ä¶]\r\nI understand that. I\'m not asking for it to work everywhere, ""magically"". I\'m only asking for an API to allow other plugins to support it.\r\nSince you\'ve done it for `Table` etc, it _must_ be possible. But there\'s no public API ‚Äî or if there is, it\'s missing from https://ckeditor.com/docs/ckeditor5/latest/features/style.html#common-api (_really_ hoping it\'s ""just"" a documentation problem! üòÑ ü§ì).', 'author': 'wimleers'}, {'body': ""> `Image` in particular is very often requested.\r\n\r\nCould you share some links to remarks about this? It would help a lot. I checked most conversations about the Style dropdown on our GH, and the tables and lists are the top comments, images almost do not appear. Even [on the Drupal side](https://www.drupal.org/project/drupal/issues/3326261) `img` was mentioned once.\r\n\r\n> So, I think this approach would make sense:\r\n\r\nLots of those comments make sense :+1: I just keep in the back of my head the remarks on the need for SD to be visible directly on the elements as the better UX choice than the large list of styles. I'm also worried about the confusion of users that applying image styles would be in two places and discovering which is where. I think most people won't grasp the difference between the presentational/positional. cc @dagdzi\r\n\r\n> Since you've done it for `Table` etc, it _must_ be possible.\r\n\r\nQuick look at the code, it is. [The new plugin was created to listen to the SD events](https://github.com/ckeditor/ckeditor5/blob/ab601563a284bc0e1fac4feee5f1b2adb6ee22b0/packages/ckeditor5-style/src/integrations/table.ts#L23) to inform if the style can be applied."", 'author': 'Witoso'}]","['Epic', 'squad:core', 'package:style']",OPEN,14274.0,"['11579', '14216', '12625', '11591', '12777', '14372', '13778', '12770', '13341', '14946', '11606', '12771', '11577']"
ckeditor,ckeditor5,Document list feature parity,"The goal of this initiative is to make `Document lists` implementation equivalent of the `List` plugin.

The following features need to be done:

*   [x] #11620 and implementation of to-do lists.
    *   [x] #14663
*   [x] #14634.

And possibly some critical bug fixes:

*   [x] #12466 comes to mind as it creates a very weird experience when pasting from Word, related #14155. Most likely, the option here would be to disable the possibility to indent paragraphs (of list items).",Witoso,[],[],"['type:task', 'Epic', 'squad:core']",CLOSED,14632.0,"['14634', '12466', '14663', '11620']"
ckeditor,ckeditor5,List v1 sunset,"After the:

*    [ ]  https://github.com/ckeditor/ckeditor5/issues/14632

We need to sunset the Lists v1:

*   [ ] #14942

Documentation needs to be created:

*    [ ]  #14960",Witoso,[],[],"['Epic', 'squad:core']",OPEN,15037.0,"['14942', '14632']"
ckeditor,ckeditor5,Further enhancements to the drag & drop: list subitems support / scrolling.,"## üìù Provide a description of the improvement

After implementing the block drag & drop, we still have ideas how to improve it.

### New behaviors

- [ ] https://github.com/ckeditor/ckeditor5/issues/14647
- [ ] https://github.com/ckeditor/ckeditor5/issues/14766
- [ ] https://github.com/ckeditor/ckeditor5/issues/14737
- [ ] https://github.com/ckeditor/ckeditor5/issues/14940
- [ ] https://github.com/ckeditor/ckeditor5/issues/15058

### Tweaks and bug fixing

- [ ] https://github.com/ckeditor/ckeditor5/issues/14739
- [ ] https://github.com/ckeditor/ckeditor5/issues/14738
- [ ] https://github.com/ckeditor/ckeditor5/issues/14711
- [ ] https://github.com/ckeditor/ckeditor5/issues/14712
- [ ] https://github.com/ckeditor/ckeditor5/issues/14950
- [ ] https://github.com/ckeditor/ckeditor5/issues/14643
- [ ] https://github.com/ckeditor/ckeditor5/issues/14641
- [ ] https://github.com/ckeditor/ckeditor5/issues/14735

---

If you'd like to see this improvement implemented, add a üëç reaction to this post.",Witoso,[],[],"['type:improvement', 'Epic', 'squad:core']",OPEN,15110.0,"['14641', '14735', '14643', '14647', '14950', '14940', '14766', '15058', '14737', '14712', '14739', '14711', '14738']"
ckeditor,ckeditor5,"Create a custom ""stale"" bot","## Provide a description of the task

As we are not fully satisfied with the current ""stale bot"" results, let's create a custom one that matches our needs and meets our requirements.

### Tasks
- [ ] ckeditor/ckeditor5#15400
- [ ] ckeditor/ckeditor5#15401
- [ ] ckeditor/ckeditor5#15402
- [ ] ckeditor/ckeditor5#15403",pomek,[],"[{'body': 'Epic branch: https://github.com/ckeditor/ckeditor5-dev/compare/ck/15399-stale-bot.', 'author': 'pomek'}]","['type:task', 'Epic', 'squad:devops', 'package:dev', 'status:in-progress']",OPEN,15399.0,"['15400', '15401', '15402', '15403']"
